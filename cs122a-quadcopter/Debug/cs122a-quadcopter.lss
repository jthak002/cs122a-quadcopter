
cs122a-quadcopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  0000089a  0000092e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000089a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080013e  0080013e  0000096c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000099c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000151e  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0a  00000000  00000000  00001fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b95  00000000  00000000  000029ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  00003584  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d8  00000000  00000000  0000378c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000596  00000000  00000000  00003e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000043fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	f8 c0       	rjmp	.+496    	; 0x226 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e9       	ldi	r30, 0x9A	; 154
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 33       	cpi	r26, 0x3E	; 62
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e3       	ldi	r26, 0x3E	; 62
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 35       	cpi	r26, 0x52	; 82
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	91 d3       	rcall	.+1826   	; 0x7e6 <main>
  c4:	e8 c3       	rjmp	.+2000   	; 0x896 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
void TimerOff(){
    TCCR1B = 0x00;
}

void TimerISR(){
    TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	58 98       	cbi	0x0b, 0	; 11
  f0:	85 b9       	out	0x05, r24	; 5
  f2:	59 9a       	sbi	0x0b, 1	; 11
  f4:	00 00       	nop
  f6:	59 98       	cbi	0x0b, 1	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	58 9a       	sbi	0x0b, 0	; 11
 136:	85 b9       	out	0x05, r24	; 5
 138:	59 9a       	sbi	0x0b, 1	; 11
 13a:	00 00       	nop
 13c:	59 98       	cbi	0x0b, 1	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <initUSART>:
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	81 f0       	breq	.+32     	; 0x19c <initUSART+0x24>
 17c:	e1 ec       	ldi	r30, 0xC1	; 193
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	88 61       	ori	r24, 0x18	; 24
 184:	80 83       	st	Z, r24
 186:	e2 ec       	ldi	r30, 0xC2	; 194
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	86 60       	ori	r24, 0x06	; 6
 18e:	80 83       	st	Z, r24
 190:	83 e3       	ldi	r24, 0x33	; 51
 192:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 196:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 19a:	08 95       	ret
 19c:	e9 ec       	ldi	r30, 0xC9	; 201
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	88 61       	ori	r24, 0x18	; 24
 1a4:	80 83       	st	Z, r24
 1a6:	ea ec       	ldi	r30, 0xCA	; 202
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	86 60       	ori	r24, 0x06	; 6
 1ae:	80 83       	st	Z, r24
 1b0:	83 e3       	ldi	r24, 0x33	; 51
 1b2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 1b6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1ba:	08 95       	ret

000001bc <USART_Send>:
 1bc:	61 30       	cpi	r22, 0x01	; 1
 1be:	41 f0       	breq	.+16     	; 0x1d0 <USART_Send+0x14>
 1c0:	e0 ec       	ldi	r30, 0xC0	; 192
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	90 81       	ld	r25, Z
 1c6:	95 ff       	sbrs	r25, 5
 1c8:	fd cf       	rjmp	.-6      	; 0x1c4 <USART_Send+0x8>
 1ca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1ce:	08 95       	ret
 1d0:	e8 ec       	ldi	r30, 0xC8	; 200
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	90 81       	ld	r25, Z
 1d6:	95 ff       	sbrs	r25, 5
 1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <USART_Send+0x18>
 1da:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 1de:	08 95       	ret

000001e0 <TimerOn>:
 1e0:	8b e0       	ldi	r24, 0x0B	; 11
 1e2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1e6:	8d e7       	ldi	r24, 0x7D	; 125
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1ee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1f8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1fc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 200:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 204:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 208:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 20c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 210:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <avr_timer_cntcurr>
 214:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <avr_timer_cntcurr+0x1>
 218:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <avr_timer_cntcurr+0x2>
 21c:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <avr_timer_cntcurr+0x3>
 220:	80 e8       	ldi	r24, 0x80	; 128
 222:	8f bf       	out	0x3f, r24	; 63
 224:	08 95       	ret

00000226 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
 234:	af 93       	push	r26
 236:	bf 93       	push	r27
    avr_timer_cntcurr--;
 238:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <avr_timer_cntcurr>
 23c:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <avr_timer_cntcurr+0x1>
 240:	a0 91 44 01 	lds	r26, 0x0144	; 0x800144 <avr_timer_cntcurr+0x2>
 244:	b0 91 45 01 	lds	r27, 0x0145	; 0x800145 <avr_timer_cntcurr+0x3>
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	a1 09       	sbc	r26, r1
 24c:	b1 09       	sbc	r27, r1
 24e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <avr_timer_cntcurr>
 252:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <avr_timer_cntcurr+0x1>
 256:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <avr_timer_cntcurr+0x2>
 25a:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <avr_timer_cntcurr+0x3>
    if (avr_timer_cntcurr == 0){
 25e:	89 2b       	or	r24, r25
 260:	8a 2b       	or	r24, r26
 262:	8b 2b       	or	r24, r27
 264:	99 f4       	brne	.+38     	; 0x28c <__vector_13+0x66>
void TimerOff(){
    TCCR1B = 0x00;
}

void TimerISR(){
    TimerFlag = 1;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <TimerFlag>

ISR(TIMER1_COMPA_vect){
    avr_timer_cntcurr--;
    if (avr_timer_cntcurr == 0){
        TimerISR();
        avr_timer_cntcurr = avr_timer_M;      
 26c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 270:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 274:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 278:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 27c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <avr_timer_cntcurr>
 280:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <avr_timer_cntcurr+0x1>
 284:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <avr_timer_cntcurr+0x2>
 288:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <avr_timer_cntcurr+0x3>
    }
}
 28c:	bf 91       	pop	r27
 28e:	af 91       	pop	r26
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <TimerSet>:

void TimerSet(unsigned long M){
    avr_timer_M = M;
 29e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 2a2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 2a6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 2aa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    avr_timer_cntcurr = avr_timer_M;
 2ae:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <avr_timer_cntcurr>
 2b2:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <avr_timer_cntcurr+0x1>
 2b6:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <avr_timer_cntcurr+0x2>
 2ba:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <avr_timer_cntcurr+0x3>
 2be:	08 95       	ret

000002c0 <A2D_init>:
    
}
/*************ADC FUNCTION**************/
void A2D_init() {
    ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 2c0:	ea e7       	ldi	r30, 0x7A	; 122
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	80 6e       	ori	r24, 0xE0	; 224
 2c8:	80 83       	st	Z, r24
 2ca:	08 95       	ret

000002cc <SM1_Tick>:
enum SM1_States{Start1,read_joystick}SM1_State;
signed char adc_inputs[4];
unsigned char adcmux_state=0;
unsigned short input=0;
void SM1_Tick(){
    switch(SM1_State){
 2cc:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <SM1_State>
 2d0:	88 23       	and	r24, r24
 2d2:	19 f0       	breq	.+6      	; 0x2da <SM1_Tick+0xe>
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	51 f0       	breq	.+20     	; 0x2ec <SM1_Tick+0x20>
 2d8:	10 c0       	rjmp	.+32     	; 0x2fa <SM1_Tick+0x2e>
        case Start1:
            if(RUN_CODE)
 2da:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <RUN_CODE>
 2de:	88 23       	and	r24, r24
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <SM1_Tick+0x18>
 2e2:	66 c0       	rjmp	.+204    	; 0x3b0 <SM1_Tick+0xe4>
                SM1_State=read_joystick;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <SM1_State>
 2ea:	0a c0       	rjmp	.+20     	; 0x300 <SM1_Tick+0x34>
            else
                SM1_State=Start1;
            break;
        case read_joystick:
            if(RUN_CODE)
 2ec:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <RUN_CODE>
 2f0:	81 11       	cpse	r24, r1
 2f2:	06 c0       	rjmp	.+12     	; 0x300 <SM1_Tick+0x34>
                SM1_State=read_joystick;
            else
                SM1_State=Start1;
 2f4:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <SM1_State>
 2f8:	08 95       	ret
            break;
        default:break;
    }
    switch(SM1_State){
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	09 f0       	breq	.+2      	; 0x300 <SM1_Tick+0x34>
 2fe:	58 c0       	rjmp	.+176    	; 0x3b0 <SM1_Tick+0xe4>
        case read_joystick:
        input=ADC;
 300:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 304:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 308:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <input+0x1>
 30c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <input>
        if(adcmux_state==3)
 310:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <adcmux_state>
 314:	83 30       	cpi	r24, 0x03	; 3
 316:	19 f4       	brne	.+6      	; 0x31e <SM1_Tick+0x52>
        ADMUX=0;
 318:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 31c:	03 c0       	rjmp	.+6      	; 0x324 <SM1_Tick+0x58>
        else
        ADMUX=adcmux_state+1;
 31e:	8f 5f       	subi	r24, 0xFF	; 255
 320:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
        if(input>550 && input<828)
 324:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <input>
 328:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <input+0x1>
 32c:	9c 01       	movw	r18, r24
 32e:	27 52       	subi	r18, 0x27	; 39
 330:	32 40       	sbci	r19, 0x02	; 2
 332:	25 31       	cpi	r18, 0x15	; 21
 334:	31 40       	sbci	r19, 0x01	; 1
 336:	40 f4       	brcc	.+16     	; 0x348 <SM1_Tick+0x7c>
        adc_inputs[adcmux_state]=1;
 338:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <adcmux_state>
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	e4 5b       	subi	r30, 0xB4	; 180
 340:	fe 4f       	sbci	r31, 0xFE	; 254
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	80 83       	st	Z, r24
 346:	2a c0       	rjmp	.+84     	; 0x39c <SM1_Tick+0xd0>
        else if(input>828)
 348:	8d 33       	cpi	r24, 0x3D	; 61
 34a:	23 e0       	ldi	r18, 0x03	; 3
 34c:	92 07       	cpc	r25, r18
 34e:	40 f0       	brcs	.+16     	; 0x360 <SM1_Tick+0x94>
        adc_inputs[adcmux_state]=2;
 350:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <adcmux_state>
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	e4 5b       	subi	r30, 0xB4	; 180
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	80 83       	st	Z, r24
 35e:	1e c0       	rjmp	.+60     	; 0x39c <SM1_Tick+0xd0>
        else if(input<250)
 360:	8a 3f       	cpi	r24, 0xFA	; 250
 362:	91 05       	cpc	r25, r1
 364:	40 f4       	brcc	.+16     	; 0x376 <SM1_Tick+0xaa>
        adc_inputs[adcmux_state]=-2;
 366:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <adcmux_state>
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	e4 5b       	subi	r30, 0xB4	; 180
 36e:	fe 4f       	sbci	r31, 0xFE	; 254
 370:	8e ef       	ldi	r24, 0xFE	; 254
 372:	80 83       	st	Z, r24
 374:	13 c0       	rjmp	.+38     	; 0x39c <SM1_Tick+0xd0>
        else if(input>250 && input<470)
 376:	8b 5f       	subi	r24, 0xFB	; 251
 378:	91 09       	sbc	r25, r1
 37a:	8b 3d       	cpi	r24, 0xDB	; 219
 37c:	91 05       	cpc	r25, r1
 37e:	40 f4       	brcc	.+16     	; 0x390 <SM1_Tick+0xc4>
        adc_inputs[adcmux_state]=-1;
 380:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <adcmux_state>
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	e4 5b       	subi	r30, 0xB4	; 180
 388:	fe 4f       	sbci	r31, 0xFE	; 254
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	80 83       	st	Z, r24
 38e:	06 c0       	rjmp	.+12     	; 0x39c <SM1_Tick+0xd0>
        else
        adc_inputs[adcmux_state]=0;
 390:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <adcmux_state>
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	e4 5b       	subi	r30, 0xB4	; 180
 398:	fe 4f       	sbci	r31, 0xFE	; 254
 39a:	10 82       	st	Z, r1
        if(adcmux_state==3)
 39c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <adcmux_state>
 3a0:	83 30       	cpi	r24, 0x03	; 3
 3a2:	19 f4       	brne	.+6      	; 0x3aa <SM1_Tick+0xde>
        adcmux_state=0;
 3a4:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <adcmux_state>
 3a8:	08 95       	ret
        else
        adcmux_state+=1;
 3aa:	8f 5f       	subi	r24, 0xFF	; 255
 3ac:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <adcmux_state>
 3b0:	08 95       	ret

000003b2 <SM2_Tick>:
}
//UPDATES THE VALUES ONTO THE LCD SCREEN
//EITHER SHOWS 'CONNECTING...' OR THE VLAUES OF 
//THROTTLE,PITCH,YAW AND ROLL
enum SM2_States{Start2,led_prep,led_display,led_halt_error}SM2_State;
void SM2_Tick(){
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	2f 97       	sbiw	r28, 0x0f	; 15
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
    switch(SM2_State){
 3cc:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <SM2_State>
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	a1 f0       	breq	.+40     	; 0x3fc <SM2_Tick+0x4a>
 3d4:	18 f0       	brcs	.+6      	; 0x3dc <SM2_Tick+0x2a>
 3d6:	82 30       	cpi	r24, 0x02	; 2
 3d8:	e9 f0       	breq	.+58     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3da:	2a c0       	rjmp	.+84     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
        case Start2:
            if(RUN_CODE)
 3dc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <RUN_CODE>
 3e0:	88 23       	and	r24, r24
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <SM2_Tick+0x34>
 3e4:	bc c0       	rjmp	.+376    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
                SM2_State=led_prep;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <SM2_State>
            else
                SM2_State=Start2;
            if(ERROR_HALT_FLAG)
 3ec:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <ERROR_HALT_FLAG>
 3f0:	88 23       	and	r24, r24
 3f2:	69 f1       	breq	.+90     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
                SM2_State=led_halt_error;
 3f4:	83 e0       	ldi	r24, 0x03	; 3
 3f6:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <SM2_State>
 3fa:	ac c0       	rjmp	.+344    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
            break;
        case led_prep:
            SM2_State=led_display;
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <SM2_State>
            if(ERROR_HALT_FLAG)
 402:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <ERROR_HALT_FLAG>
 406:	88 23       	and	r24, r24
 408:	09 f4       	brne	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	3d c0       	rjmp	.+122    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
                SM2_State=led_halt_error;
 40c:	83 e0       	ldi	r24, 0x03	; 3
 40e:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <SM2_State>
 412:	a0 c0       	rjmp	.+320    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
            break;
        case led_display:
            if(RUN_CODE)
 414:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <RUN_CODE>
 418:	81 11       	cpse	r24, r1
 41a:	a6 c0       	rjmp	.+332    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
                SM2_State=led_display;
            else
                SM2_State=Start2;
 41c:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <SM2_State>
            if(ERROR_HALT_FLAG)
 420:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <ERROR_HALT_FLAG>
 424:	88 23       	and	r24, r24
 426:	69 f0       	breq	.+26     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
                SM2_State=led_halt_error;
 428:	83 e0       	ldi	r24, 0x03	; 3
 42a:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <SM2_State>
 42e:	92 c0       	rjmp	.+292    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
            break;
        default:break;
    }
    switch(SM2_State){
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	69 f0       	breq	.+26     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 434:	30 f0       	brcs	.+12     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 436:	82 30       	cpi	r24, 0x02	; 2
 438:	31 f1       	breq	.+76     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 43a:	83 30       	cpi	r24, 0x03	; 3
 43c:	09 f0       	breq	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	9a c0       	rjmp	.+308    	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
        
        case Start2:
            LCD_ClearScreen();
 440:	89 c0       	rjmp	.+274    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
            LCD_DisplayString(1,"CONNECTING....");
 442:	5e de       	rcall	.-836    	; 0x100 <LCD_ClearScreen>
 444:	63 e1       	ldi	r22, 0x13	; 19
 446:	71 e0       	ldi	r23, 0x01	; 1
            break;
 448:	81 e0       	ldi	r24, 0x01	; 1
            
        //Prepares the LCD Display for displaying controller Data
        case led_prep:
            LCD_ClearScreen();
 44a:	7d de       	rcall	.-774    	; 0x146 <LCD_DisplayString>
            LCD_DisplayString(1,"Thrtl: 0 Yaw: 0");
 44c:	93 c0       	rjmp	.+294    	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 44e:	58 de       	rcall	.-848    	; 0x100 <LCD_ClearScreen>
 450:	62 e2       	ldi	r22, 0x22	; 34
 452:	71 e0       	ldi	r23, 0x01	; 1
            unsigned char second_string []={'P','t','c','h',':',' ','0',' ','R','o','l','l',':',' ','0'};
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	77 de       	rcall	.-786    	; 0x146 <LCD_DisplayString>
 458:	8f e0       	ldi	r24, 0x0F	; 15
 45a:	e4 e0       	ldi	r30, 0x04	; 4
 45c:	f1 e0       	ldi	r31, 0x01	; 1
 45e:	de 01       	movw	r26, r28
 460:	11 96       	adiw	r26, 0x01	; 1
 462:	01 90       	ld	r0, Z+
 464:	0d 92       	st	X+, r0
 466:	8a 95       	dec	r24
 468:	e1 f7       	brne	.-8      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 46a:	ce 01       	movw	r24, r28
            for(int m=0;m<15;m++)
            {
                LCD_Cursor(17+m);
 46c:	01 96       	adiw	r24, 0x01	; 1
 46e:	7c 01       	movw	r14, r24
                LCD_WriteData(second_string[m]);
 470:	11 e1       	ldi	r17, 0x11	; 17
 472:	81 2f       	mov	r24, r17
 474:	48 de       	rcall	.-880    	; 0x106 <LCD_Cursor>
 476:	f7 01       	movw	r30, r14
 478:	81 91       	ld	r24, Z+
        //Prepares the LCD Display for displaying controller Data
        case led_prep:
            LCD_ClearScreen();
            LCD_DisplayString(1,"Thrtl: 0 Yaw: 0");
            unsigned char second_string []={'P','t','c','h',':',' ','0',' ','R','o','l','l',':',' ','0'};
            for(int m=0;m<15;m++)
 47a:	7f 01       	movw	r14, r30
 47c:	5b de       	rcall	.-842    	; 0x134 <LCD_WriteData>
 47e:	1f 5f       	subi	r17, 0xFF	; 255
            break;
            
        //DISPLAYS THE CONTROLLER DATA-->DATA THAT THE CONTROLLER SENDS OVER THE BLUETOOTH
        case led_display:
        //Displaying the THROTTLE_DATA
        LCD_Cursor(7);
 480:	10 32       	cpi	r17, 0x20	; 32
 482:	b9 f7       	brne	.-18     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
        if(adc_inputs[3]<0){
 484:	77 c0       	rjmp	.+238    	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 486:	87 e0       	ldi	r24, 0x07	; 7
            LCD_WriteData('-');
 488:	3e de       	rcall	.-900    	; 0x106 <LCD_Cursor>
 48a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <adc_inputs+0x3>
 48e:	88 23       	and	r24, r24
        }
        else
            LCD_WriteData(' ');
 490:	1c f4       	brge	.+6      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 492:	8d e2       	ldi	r24, 0x2D	; 45
 494:	4f de       	rcall	.-866    	; 0x134 <LCD_WriteData>
        LCD_Cursor(8);
 496:	02 c0       	rjmp	.+4      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 498:	80 e2       	ldi	r24, 0x20	; 32
 49a:	4c de       	rcall	.-872    	; 0x134 <LCD_WriteData>
        LCD_WriteData(48+abs(adc_inputs[3]));
 49c:	88 e0       	ldi	r24, 0x08	; 8
 49e:	33 de       	rcall	.-922    	; 0x106 <LCD_Cursor>
 4a0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <adc_inputs+0x3>
 4a4:	08 2e       	mov	r0, r24
 4a6:	00 0c       	add	r0, r0
 4a8:	99 0b       	sbc	r25, r25
 4aa:	99 23       	and	r25, r25
 4ac:	1c f4       	brge	.+6      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
        //Displaying the YAW_DATA
        LCD_Cursor(14);
 4ae:	91 95       	neg	r25
 4b0:	81 95       	neg	r24
        if(adc_inputs[2]<0)
 4b2:	91 09       	sbc	r25, r1
 4b4:	80 5d       	subi	r24, 0xD0	; 208
 4b6:	3e de       	rcall	.-900    	; 0x134 <LCD_WriteData>
 4b8:	8e e0       	ldi	r24, 0x0E	; 14
            LCD_WriteData('-');
 4ba:	25 de       	rcall	.-950    	; 0x106 <LCD_Cursor>
 4bc:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <adc_inputs+0x2>
 4c0:	88 23       	and	r24, r24
        else
            LCD_WriteData(' ');
 4c2:	1c f4       	brge	.+6      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4c4:	8d e2       	ldi	r24, 0x2D	; 45
        LCD_Cursor(15);
 4c6:	36 de       	rcall	.-916    	; 0x134 <LCD_WriteData>
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
        LCD_WriteData(48+abs(adc_inputs[2]));
 4ca:	80 e2       	ldi	r24, 0x20	; 32
 4cc:	33 de       	rcall	.-922    	; 0x134 <LCD_WriteData>
 4ce:	8f e0       	ldi	r24, 0x0F	; 15
 4d0:	1a de       	rcall	.-972    	; 0x106 <LCD_Cursor>
 4d2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <adc_inputs+0x2>
 4d6:	08 2e       	mov	r0, r24
 4d8:	00 0c       	add	r0, r0
 4da:	99 0b       	sbc	r25, r25
 4dc:	99 23       	and	r25, r25
        //Displaying the PITCH_DATA
        LCD_Cursor(22);
 4de:	1c f4       	brge	.+6      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e0:	91 95       	neg	r25
 4e2:	81 95       	neg	r24
        if(adc_inputs[1]<0)
 4e4:	91 09       	sbc	r25, r1
 4e6:	80 5d       	subi	r24, 0xD0	; 208
 4e8:	25 de       	rcall	.-950    	; 0x134 <LCD_WriteData>
 4ea:	86 e1       	ldi	r24, 0x16	; 22
            LCD_WriteData('-');
 4ec:	0c de       	rcall	.-1000   	; 0x106 <LCD_Cursor>
 4ee:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <adc_inputs+0x1>
        else
            LCD_WriteData(' ');
 4f2:	88 23       	and	r24, r24
 4f4:	1c f4       	brge	.+6      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
        LCD_Cursor(23);
 4f6:	8d e2       	ldi	r24, 0x2D	; 45
 4f8:	1d de       	rcall	.-966    	; 0x134 <LCD_WriteData>
        LCD_WriteData(48+abs(adc_inputs[1]));
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4fc:	80 e2       	ldi	r24, 0x20	; 32
 4fe:	1a de       	rcall	.-972    	; 0x134 <LCD_WriteData>
 500:	87 e1       	ldi	r24, 0x17	; 23
 502:	01 de       	rcall	.-1022   	; 0x106 <LCD_Cursor>
 504:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <adc_inputs+0x1>
 508:	08 2e       	mov	r0, r24
 50a:	00 0c       	add	r0, r0
 50c:	99 0b       	sbc	r25, r25
 50e:	99 23       	and	r25, r25
        //Displaying the ROLL_DATA
        LCD_Cursor(30);
 510:	1c f4       	brge	.+6      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 512:	91 95       	neg	r25
        if(adc_inputs[0]<0)
 514:	81 95       	neg	r24
 516:	91 09       	sbc	r25, r1
            LCD_WriteData('-');
 518:	80 5d       	subi	r24, 0xD0	; 208
 51a:	0c de       	rcall	.-1000   	; 0x134 <LCD_WriteData>
 51c:	8e e1       	ldi	r24, 0x1E	; 30
        else
            LCD_WriteData(' ');
 51e:	f3 dd       	rcall	.-1050   	; 0x106 <LCD_Cursor>
 520:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <adc_inputs>
        LCD_Cursor(31);
 524:	88 23       	and	r24, r24
 526:	1c f4       	brge	.+6      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 528:	8d e2       	ldi	r24, 0x2D	; 45
        LCD_WriteData(48+abs(adc_inputs[0]));   
 52a:	04 de       	rcall	.-1016   	; 0x134 <LCD_WriteData>
 52c:	02 c0       	rjmp	.+4      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 52e:	80 e2       	ldi	r24, 0x20	; 32
 530:	01 de       	rcall	.-1022   	; 0x134 <LCD_WriteData>
 532:	8f e1       	ldi	r24, 0x1F	; 31
 534:	e8 dd       	rcall	.-1072   	; 0x106 <LCD_Cursor>
 536:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <adc_inputs>
 53a:	08 2e       	mov	r0, r24
 53c:	00 0c       	add	r0, r0
 53e:	99 0b       	sbc	r25, r25
 540:	99 23       	and	r25, r25
 542:	1c f4       	brge	.+6      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
        LCD_Cursor(32);          
 544:	91 95       	neg	r25
 546:	81 95       	neg	r24
 548:	91 09       	sbc	r25, r1
        break;
 54a:	80 5d       	subi	r24, 0xD0	; 208
        case led_halt_error:
            LCD_DisplayString(1,"ERROR_HALT!");
 54c:	f3 dd       	rcall	.-1050   	; 0x134 <LCD_WriteData>
 54e:	80 e2       	ldi	r24, 0x20	; 32
 550:	da dd       	rcall	.-1100   	; 0x106 <LCD_Cursor>
 552:	10 c0       	rjmp	.+32     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 554:	62 e3       	ldi	r22, 0x32	; 50
            break;
        default:break;
    }
}
 556:	71 e0       	ldi	r23, 0x01	; 1
        case Start2:
            if(RUN_CODE)
                SM2_State=led_prep;
            else
                SM2_State=Start2;
            if(ERROR_HALT_FLAG)
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	f5 dd       	rcall	.-1046   	; 0x146 <LCD_DisplayString>
 55c:	0b c0       	rjmp	.+22     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 55e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <ERROR_HALT_FLAG>
        case led_display:
            if(RUN_CODE)
                SM2_State=led_display;
            else
                SM2_State=Start2;
            if(ERROR_HALT_FLAG)
 562:	81 11       	cpse	r24, r1
 564:	47 cf       	rjmp	.-370    	; 0x3f4 <SM2_Tick+0x42>
 566:	6d cf       	rjmp	.-294    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 568:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <ERROR_HALT_FLAG>
 56c:	88 23       	and	r24, r24
        case led_halt_error:
            LCD_DisplayString(1,"ERROR_HALT!");
            break;
        default:break;
    }
}
 56e:	09 f4       	brne	.+2      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 570:	8a cf       	rjmp	.-236    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 572:	5a cf       	rjmp	.-332    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 574:	2f 96       	adiw	r28, 0x0f	; 15
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	f8 94       	cli
 57a:	de bf       	out	0x3e, r29	; 62
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	cd bf       	out	0x3d, r28	; 61
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	1f 91       	pop	r17
 586:	ff 90       	pop	r15
 588:	ef 90       	pop	r14
 58a:	08 95       	ret

0000058c <SM3_Tick>:
//TRANSMITS THE DATA FROM THE JOYSTIUCKS TO THE FLIGHT CONTROLLER. 
//EVERY OTHER CLOCK_PERIOD THE DATA FOR PITCH-ROLL OR THROTTLE-YAW IS TRANSMITTED
enum SM3_States{Start3, controller_send, halt_send}SM3_State;
unsigned char send_val=0x00;
void SM3_Tick(){
    switch(SM3_State)
 58c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <SM3_State>
 590:	88 23       	and	r24, r24
 592:	19 f0       	breq	.+6      	; 0x59a <SM3_Tick+0xe>
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	89 f0       	breq	.+34     	; 0x5ba <SM3_Tick+0x2e>
 598:	1f c0       	rjmp	.+62     	; 0x5d8 <SM3_Tick+0x4c>
    {
        case Start3:
            if(RUN_CODE)
 59a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <RUN_CODE>
 59e:	88 23       	and	r24, r24
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <SM3_Tick+0x18>
 5a2:	e5 c0       	rjmp	.+458    	; 0x76e <SM3_Tick+0x1e2>
                SM3_State=controller_send;
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <SM3_State>
            else
                SM3_State=Start3;
            if(ERROR_HALT_FLAG)
 5aa:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <ERROR_HALT_FLAG>
 5ae:	88 23       	and	r24, r24
 5b0:	c9 f0       	breq	.+50     	; 0x5e4 <SM3_Tick+0x58>
                SM3_State=halt_send;
 5b2:	82 e0       	ldi	r24, 0x02	; 2
 5b4:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <SM3_State>
 5b8:	cd c0       	rjmp	.+410    	; 0x754 <SM3_Tick+0x1c8>
            break;
        case controller_send:
            if(RUN_CODE)
 5ba:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <RUN_CODE>
 5be:	81 11       	cpse	r24, r1
 5c0:	db c0       	rjmp	.+438    	; 0x778 <SM3_Tick+0x1ec>
                SM3_State=controller_send;
            else
                SM3_State=Start3;
 5c2:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <SM3_State>
            if(ERROR_HALT_FLAG)
 5c6:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <ERROR_HALT_FLAG>
 5ca:	88 23       	and	r24, r24
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <SM3_Tick+0x44>
 5ce:	d9 c0       	rjmp	.+434    	; 0x782 <SM3_Tick+0x1f6>
                SM3_State=halt_send;
 5d0:	82 e0       	ldi	r24, 0x02	; 2
 5d2:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <SM3_State>
 5d6:	be c0       	rjmp	.+380    	; 0x754 <SM3_Tick+0x1c8>
            break;
        default:break;
    }
    switch(SM3_State){
 5d8:	81 30       	cpi	r24, 0x01	; 1
 5da:	21 f0       	breq	.+8      	; 0x5e4 <SM3_Tick+0x58>
 5dc:	82 30       	cpi	r24, 0x02	; 2
 5de:	09 f0       	breq	.+2      	; 0x5e2 <SM3_Tick+0x56>
 5e0:	d0 c0       	rjmp	.+416    	; 0x782 <SM3_Tick+0x1f6>
 5e2:	b8 c0       	rjmp	.+368    	; 0x754 <SM3_Tick+0x1c8>
        case controller_send:
            if(send_val)
 5e4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
 5e8:	88 23       	and	r24, r24
 5ea:	09 f4       	brne	.+2      	; 0x5ee <SM3_Tick+0x62>
 5ec:	57 c0       	rjmp	.+174    	; 0x69c <SM3_Tick+0x110>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 5ee:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
            {
                //TRANSMIT ROLL CONTROLLER INPUT TO QUAD
                if(USART_IsSendReady(1))
 5f2:	85 ff       	sbrs	r24, 5
 5f4:	27 c0       	rjmp	.+78     	; 0x644 <SM3_Tick+0xb8>
                {
                    //ADC_INPUTS[0] HAVE ROLL VALUES STORED IN THEM
                    switch(adc_inputs[0])
 5f6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <adc_inputs>
 5fa:	88 23       	and	r24, r24
 5fc:	99 f0       	breq	.+38     	; 0x624 <SM3_Tick+0x98>
 5fe:	2c f4       	brge	.+10     	; 0x60a <SM3_Tick+0x7e>
 600:	8e 3f       	cpi	r24, 0xFE	; 254
 602:	41 f0       	breq	.+16     	; 0x614 <SM3_Tick+0x88>
 604:	8f 3f       	cpi	r24, 0xFF	; 255
 606:	51 f0       	breq	.+20     	; 0x61c <SM3_Tick+0x90>
 608:	18 c0       	rjmp	.+48     	; 0x63a <SM3_Tick+0xae>
 60a:	81 30       	cpi	r24, 0x01	; 1
 60c:	79 f0       	breq	.+30     	; 0x62c <SM3_Tick+0xa0>
 60e:	82 30       	cpi	r24, 0x02	; 2
 610:	89 f0       	breq	.+34     	; 0x634 <SM3_Tick+0xa8>
 612:	13 c0       	rjmp	.+38     	; 0x63a <SM3_Tick+0xae>
                    {
                        case -2:
                            USART_Send(ROLL_LEFT_2,1);
 614:	61 e0       	ldi	r22, 0x01	; 1
 616:	82 ec       	ldi	r24, 0xC2	; 194
 618:	d1 dd       	rcall	.-1118   	; 0x1bc <USART_Send>
                            break;
 61a:	0f c0       	rjmp	.+30     	; 0x63a <SM3_Tick+0xae>
                        case -1:
                            USART_Send(ROLL_LEFT_1,1);
 61c:	61 e0       	ldi	r22, 0x01	; 1
 61e:	81 ec       	ldi	r24, 0xC1	; 193
 620:	cd dd       	rcall	.-1126   	; 0x1bc <USART_Send>
                            break;
                        case 0:
                            USART_Send(ROLL_NEUTRAL,1);
 622:	0b c0       	rjmp	.+22     	; 0x63a <SM3_Tick+0xae>
 624:	61 e0       	ldi	r22, 0x01	; 1
                            break;
                        case 1:
                            USART_Send(ROLL_RIGHT_1,1);
 626:	80 ec       	ldi	r24, 0xC0	; 192
 628:	c9 dd       	rcall	.-1134   	; 0x1bc <USART_Send>
 62a:	07 c0       	rjmp	.+14     	; 0x63a <SM3_Tick+0xae>
                            break;
 62c:	61 e0       	ldi	r22, 0x01	; 1
                        case 2:
                            USART_Send(ROLL_RIGHT_2,1);
 62e:	84 ec       	ldi	r24, 0xC4	; 196
 630:	c5 dd       	rcall	.-1142   	; 0x1bc <USART_Send>
 632:	03 c0       	rjmp	.+6      	; 0x63a <SM3_Tick+0xae>
 634:	61 e0       	ldi	r22, 0x01	; 1
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 636:	8c ec       	ldi	r24, 0xCC	; 204
 638:	c1 dd       	rcall	.-1150   	; 0x1bc <USART_Send>
 63a:	e8 ec       	ldi	r30, 0xC8	; 200
                            break;
                        default:break;
                    }
                    while(!USART_HasTransmitted(1));
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 640:	86 ff       	sbrs	r24, 6
 642:	fd cf       	rjmp	.-6      	; 0x63e <SM3_Tick+0xb2>
                }
                //TRANSMIT ROLL CONTROLLER INPUT TO QUAD
                if(USART_IsSendReady(1))
 644:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
                {
                    switch(adc_inputs[1]){
 648:	85 ff       	sbrs	r24, 5
 64a:	7e c0       	rjmp	.+252    	; 0x748 <SM3_Tick+0x1bc>
 64c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <adc_inputs+0x1>
 650:	88 23       	and	r24, r24
 652:	99 f0       	breq	.+38     	; 0x67a <SM3_Tick+0xee>
 654:	2c f4       	brge	.+10     	; 0x660 <SM3_Tick+0xd4>
 656:	8e 3f       	cpi	r24, 0xFE	; 254
 658:	41 f0       	breq	.+16     	; 0x66a <SM3_Tick+0xde>
 65a:	8f 3f       	cpi	r24, 0xFF	; 255
 65c:	51 f0       	breq	.+20     	; 0x672 <SM3_Tick+0xe6>
 65e:	18 c0       	rjmp	.+48     	; 0x690 <SM3_Tick+0x104>
 660:	81 30       	cpi	r24, 0x01	; 1
 662:	79 f0       	breq	.+30     	; 0x682 <SM3_Tick+0xf6>
                        case -2:
                            USART_Send(PITCH_BCK_2,1);
 664:	82 30       	cpi	r24, 0x02	; 2
 666:	89 f0       	breq	.+34     	; 0x68a <SM3_Tick+0xfe>
 668:	13 c0       	rjmp	.+38     	; 0x690 <SM3_Tick+0x104>
                            break;
                        case -1:
                            USART_Send(PITCH_BCK_1,1);
 66a:	61 e0       	ldi	r22, 0x01	; 1
 66c:	8c e4       	ldi	r24, 0x4C	; 76
                            break;
                        case 0:
                            USART_Send(PITCH_NEUTRAL,1);
 66e:	a6 dd       	rcall	.-1204   	; 0x1bc <USART_Send>
 670:	0f c0       	rjmp	.+30     	; 0x690 <SM3_Tick+0x104>
 672:	61 e0       	ldi	r22, 0x01	; 1
                            break;
 674:	84 e4       	ldi	r24, 0x44	; 68
                        case 1:
                            USART_Send(PITCH_FWD_1,1);
 676:	a2 dd       	rcall	.-1212   	; 0x1bc <USART_Send>
 678:	0b c0       	rjmp	.+22     	; 0x690 <SM3_Tick+0x104>
 67a:	61 e0       	ldi	r22, 0x01	; 1
 67c:	80 e4       	ldi	r24, 0x40	; 64
                            break;
 67e:	9e dd       	rcall	.-1220   	; 0x1bc <USART_Send>
                        case 2:
                            USART_Send(PITCH_FWD_2,1);
 680:	07 c0       	rjmp	.+14     	; 0x690 <SM3_Tick+0x104>
 682:	61 e0       	ldi	r22, 0x01	; 1
 684:	81 e4       	ldi	r24, 0x41	; 65
 686:	9a dd       	rcall	.-1228   	; 0x1bc <USART_Send>
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 688:	03 c0       	rjmp	.+6      	; 0x690 <SM3_Tick+0x104>
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	83 e4       	ldi	r24, 0x43	; 67
                            break;
                    }
                    while(!USART_HasTransmitted(1));
 68e:	96 dd       	rcall	.-1236   	; 0x1bc <USART_Send>
 690:	e8 ec       	ldi	r30, 0xC8	; 200
 692:	f0 e0       	ldi	r31, 0x00	; 0
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 694:	80 81       	ld	r24, Z
 696:	86 ff       	sbrs	r24, 6
                }
            } 
            else{                    
                //TRANSMIT YAW CONTROLLER INPUT TO QUAD
                if(USART_IsSendReady(1))
 698:	fd cf       	rjmp	.-6      	; 0x694 <SM3_Tick+0x108>
 69a:	56 c0       	rjmp	.+172    	; 0x748 <SM3_Tick+0x1bc>
                {
                    switch(adc_inputs[2]){
 69c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 6a0:	85 ff       	sbrs	r24, 5
 6a2:	27 c0       	rjmp	.+78     	; 0x6f2 <SM3_Tick+0x166>
 6a4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <adc_inputs+0x2>
 6a8:	88 23       	and	r24, r24
 6aa:	99 f0       	breq	.+38     	; 0x6d2 <SM3_Tick+0x146>
 6ac:	2c f4       	brge	.+10     	; 0x6b8 <SM3_Tick+0x12c>
 6ae:	8e 3f       	cpi	r24, 0xFE	; 254
 6b0:	41 f0       	breq	.+16     	; 0x6c2 <SM3_Tick+0x136>
 6b2:	8f 3f       	cpi	r24, 0xFF	; 255
                        case -2:
                        USART_Send(YAW_LEFT_2,1);
 6b4:	51 f0       	breq	.+20     	; 0x6ca <SM3_Tick+0x13e>
 6b6:	18 c0       	rjmp	.+48     	; 0x6e8 <SM3_Tick+0x15c>
                        break;
                        case -1:
                        USART_Send(YAW_LEFT_1,1);
 6b8:	81 30       	cpi	r24, 0x01	; 1
 6ba:	79 f0       	breq	.+30     	; 0x6da <SM3_Tick+0x14e>
 6bc:	82 30       	cpi	r24, 0x02	; 2
                        break;
 6be:	89 f0       	breq	.+34     	; 0x6e2 <SM3_Tick+0x156>
                        case 0:
                        USART_Send(YAW_NEUTRAL,1);
 6c0:	13 c0       	rjmp	.+38     	; 0x6e8 <SM3_Tick+0x15c>
 6c2:	61 e0       	ldi	r22, 0x01	; 1
 6c4:	8c e3       	ldi	r24, 0x3C	; 60
 6c6:	7a dd       	rcall	.-1292   	; 0x1bc <USART_Send>
                        break;
 6c8:	0f c0       	rjmp	.+30     	; 0x6e8 <SM3_Tick+0x15c>
                        case 1:
                        USART_Send(YAW_RIGHT_1,1);
 6ca:	61 e0       	ldi	r22, 0x01	; 1
 6cc:	84 e3       	ldi	r24, 0x34	; 52
 6ce:	76 dd       	rcall	.-1300   	; 0x1bc <USART_Send>
 6d0:	0b c0       	rjmp	.+22     	; 0x6e8 <SM3_Tick+0x15c>
                        break;
 6d2:	61 e0       	ldi	r22, 0x01	; 1
                        case 2:
                        USART_Send(YAW_RIGHT_2,1);
 6d4:	80 e3       	ldi	r24, 0x30	; 48
 6d6:	72 dd       	rcall	.-1308   	; 0x1bc <USART_Send>
 6d8:	07 c0       	rjmp	.+14     	; 0x6e8 <SM3_Tick+0x15c>
 6da:	61 e0       	ldi	r22, 0x01	; 1
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 6dc:	81 e3       	ldi	r24, 0x31	; 49
 6de:	6e dd       	rcall	.-1316   	; 0x1bc <USART_Send>
 6e0:	03 c0       	rjmp	.+6      	; 0x6e8 <SM3_Tick+0x15c>
                        break;
                    }
                    while(!USART_HasTransmitted(1));
 6e2:	61 e0       	ldi	r22, 0x01	; 1
 6e4:	83 e3       	ldi	r24, 0x33	; 51
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 6e6:	6a dd       	rcall	.-1324   	; 0x1bc <USART_Send>
 6e8:	e8 ec       	ldi	r30, 0xC8	; 200
                }
                //TRANSMIT THROTTLE CONTROLLER INPUT TO QUAD
                if(USART_IsSendReady(1))
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
                {
                    switch(adc_inputs[3]){
 6ee:	86 ff       	sbrs	r24, 6
 6f0:	fd cf       	rjmp	.-6      	; 0x6ec <SM3_Tick+0x160>
 6f2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 6f6:	85 ff       	sbrs	r24, 5
 6f8:	27 c0       	rjmp	.+78     	; 0x748 <SM3_Tick+0x1bc>
 6fa:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <adc_inputs+0x3>
 6fe:	88 23       	and	r24, r24
 700:	99 f0       	breq	.+38     	; 0x728 <SM3_Tick+0x19c>
 702:	2c f4       	brge	.+10     	; 0x70e <SM3_Tick+0x182>
                        case -2:
                        USART_Send(THROTTLE_DWN_2,1);
 704:	8e 3f       	cpi	r24, 0xFE	; 254
 706:	41 f0       	breq	.+16     	; 0x718 <SM3_Tick+0x18c>
 708:	8f 3f       	cpi	r24, 0xFF	; 255
                        break;
 70a:	51 f0       	breq	.+20     	; 0x720 <SM3_Tick+0x194>
                        case -1:
                        USART_Send(THROTTLE_DWN_1,1);
 70c:	18 c0       	rjmp	.+48     	; 0x73e <SM3_Tick+0x1b2>
 70e:	81 30       	cpi	r24, 0x01	; 1
 710:	79 f0       	breq	.+30     	; 0x730 <SM3_Tick+0x1a4>
 712:	82 30       	cpi	r24, 0x02	; 2
                        break;
 714:	89 f0       	breq	.+34     	; 0x738 <SM3_Tick+0x1ac>
                        case 0:
                        USART_Send(THROTTLE_NEUTRAL,1);
 716:	13 c0       	rjmp	.+38     	; 0x73e <SM3_Tick+0x1b2>
 718:	61 e0       	ldi	r22, 0x01	; 1
 71a:	8c e1       	ldi	r24, 0x1C	; 28
 71c:	4f dd       	rcall	.-1378   	; 0x1bc <USART_Send>
                        break;
 71e:	0f c0       	rjmp	.+30     	; 0x73e <SM3_Tick+0x1b2>
                        case 1:
                        USART_Send(THROTTLE_UP_1,1);
 720:	61 e0       	ldi	r22, 0x01	; 1
 722:	84 e1       	ldi	r24, 0x14	; 20
 724:	4b dd       	rcall	.-1386   	; 0x1bc <USART_Send>
 726:	0b c0       	rjmp	.+22     	; 0x73e <SM3_Tick+0x1b2>
                        break;
 728:	61 e0       	ldi	r22, 0x01	; 1
                        case 2:
                        USART_Send(THROTTLE_UP_2,1);
 72a:	80 e1       	ldi	r24, 0x10	; 16
 72c:	47 dd       	rcall	.-1394   	; 0x1bc <USART_Send>
 72e:	07 c0       	rjmp	.+14     	; 0x73e <SM3_Tick+0x1b2>
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 730:	61 e0       	ldi	r22, 0x01	; 1
 732:	81 e1       	ldi	r24, 0x11	; 17
 734:	43 dd       	rcall	.-1402   	; 0x1bc <USART_Send>
                        break;
                    }
                    while(!USART_HasTransmitted(1));
 736:	03 c0       	rjmp	.+6      	; 0x73e <SM3_Tick+0x1b2>
 738:	61 e0       	ldi	r22, 0x01	; 1
                }
            }
            send_val=~send_val;
 73a:	83 e1       	ldi	r24, 0x13	; 19
 73c:	3f dd       	rcall	.-1410   	; 0x1bc <USART_Send>
 73e:	e8 ec       	ldi	r30, 0xC8	; 200
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	80 81       	ld	r24, Z
            break;
 744:	86 ff       	sbrs	r24, 6
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 746:	fd cf       	rjmp	.-6      	; 0x742 <SM3_Tick+0x1b6>
 748:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
            case halt_send:
                if(USART_IsSendReady(1))
 74c:	80 95       	com	r24
                USART_Send(ERROR_HALT,1);
 74e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
 752:	08 95       	ret
 754:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 758:	85 ff       	sbrs	r24, 5
 75a:	03 c0       	rjmp	.+6      	; 0x762 <SM3_Tick+0x1d6>
                while(!USART_HasTransmitted(1));
 75c:	61 e0       	ldi	r22, 0x01	; 1
 75e:	8f ef       	ldi	r24, 0xFF	; 255
 760:	2d dd       	rcall	.-1446   	; 0x1bc <USART_Send>
        case Start3:
            if(RUN_CODE)
                SM3_State=controller_send;
            else
                SM3_State=Start3;
            if(ERROR_HALT_FLAG)
 762:	e8 ec       	ldi	r30, 0xC8	; 200
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	80 81       	ld	r24, Z
 768:	86 ff       	sbrs	r24, 6
 76a:	fd cf       	rjmp	.-6      	; 0x766 <SM3_Tick+0x1da>
        case controller_send:
            if(RUN_CODE)
                SM3_State=controller_send;
            else
                SM3_State=Start3;
            if(ERROR_HALT_FLAG)
 76c:	08 95       	ret
 76e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <ERROR_HALT_FLAG>
 772:	88 23       	and	r24, r24
 774:	31 f0       	breq	.+12     	; 0x782 <SM3_Tick+0x1f6>
 776:	1d cf       	rjmp	.-454    	; 0x5b2 <SM3_Tick+0x26>
 778:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <ERROR_HALT_FLAG>
 77c:	81 11       	cpse	r24, r1
 77e:	28 cf       	rjmp	.-432    	; 0x5d0 <SM3_Tick+0x44>
 780:	31 cf       	rjmp	.-414    	; 0x5e4 <SM3_Tick+0x58>
 782:	08 95       	ret

00000784 <SM4_Tick>:
//THIS STATE MACHINE CHECKS CONNECTIVITY OF THE BT MODULE
//THE CONTROLLER GOES INTO SEARCH MODE AS SOON AS THE BLUETOOTH CONNECTION IS LOST
//NORMAL FUNCTIONALITY IS RESUMED ONCE CONNECTION IS RE-ESTABLISHED
enum SM4_States{Start4, CHECK_CONNECTIVITY} SM4_State;
void SM4_Tick(){
    switch(SM4_State){
 784:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <SM4_State>
 788:	88 23       	and	r24, r24
 78a:	19 f0       	breq	.+6      	; 0x792 <SM4_Tick+0xe>
 78c:	81 30       	cpi	r24, 0x01	; 1
 78e:	39 f0       	breq	.+14     	; 0x79e <SM4_Tick+0x1a>
 790:	04 c0       	rjmp	.+8      	; 0x79a <SM4_Tick+0x16>
        case Start4:
            SM4_State=CHECK_CONNECTIVITY;
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <SM4_State>
            break;
 798:	02 c0       	rjmp	.+4      	; 0x79e <SM4_Tick+0x1a>
        case CHECK_CONNECTIVITY:
            SM4_State=CHECK_CONNECTIVITY;
            break;
        default: break;  
    }
    switch(SM4_State){
 79a:	81 30       	cpi	r24, 0x01	; 1
 79c:	41 f4       	brne	.+16     	; 0x7ae <SM4_Tick+0x2a>
        case CHECK_CONNECTIVITY:
            if(PINC&0x01)
 79e:	30 9b       	sbis	0x06, 0	; 6
 7a0:	04 c0       	rjmp	.+8      	; 0x7aa <SM4_Tick+0x26>
                RUN_CODE=0x01;
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <RUN_CODE>
 7a8:	08 95       	ret
            else
                RUN_CODE=0x00;
 7aa:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <RUN_CODE>
 7ae:	08 95       	ret

000007b0 <SM5_Tick>:
//BY THE BUTTON ATTACHED TO C1. IF ENABLED, SEND COMMAND TO SHUT DOWN THE QUADCOPTER

enum SM5_States{Start5,CHECK_ERROR_HALT}SM5_State;
void SM5_Tick()
{
    switch(SM5_State)
 7b0:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <SM5_State>
 7b4:	99 23       	and	r25, r25
 7b6:	19 f0       	breq	.+6      	; 0x7be <SM5_Tick+0xe>
 7b8:	91 30       	cpi	r25, 0x01	; 1
 7ba:	81 f0       	breq	.+32     	; 0x7dc <SM5_Tick+0x2c>
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <SM5_Tick+0x16>
    {
        case Start5:
            SM5_State=CHECK_ERROR_HALT;
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <SM5_State>
            break;
 7c4:	0b c0       	rjmp	.+22     	; 0x7dc <SM5_Tick+0x2c>
        case CHECK_ERROR_HALT:
            SM5_State=CHECK_ERROR_HALT;
            break;
        default:break;
    }
    unsigned char input=~PINC&0x02;
 7c6:	86 b1       	in	r24, 0x06	; 6
    switch(SM5_State)
 7c8:	91 30       	cpi	r25, 0x01	; 1
 7ca:	61 f4       	brne	.+24     	; 0x7e4 <SM5_Tick+0x34>
        case CHECK_ERROR_HALT:
            SM5_State=CHECK_ERROR_HALT;
            break;
        default:break;
    }
    unsigned char input=~PINC&0x02;
 7cc:	80 95       	com	r24
 7ce:	82 70       	andi	r24, 0x02	; 2
    switch(SM5_State)
    {
        case CHECK_ERROR_HALT:
            if(input)
 7d0:	88 23       	and	r24, r24
 7d2:	41 f0       	breq	.+16     	; 0x7e4 <SM5_Tick+0x34>
                ERROR_HALT_FLAG=0xFF;
 7d4:	8f ef       	ldi	r24, 0xFF	; 255
 7d6:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <ERROR_HALT_FLAG>
            break;
        default: break;
    }
}
 7da:	08 95       	ret
        case CHECK_ERROR_HALT:
            SM5_State=CHECK_ERROR_HALT;
            break;
        default:break;
    }
    unsigned char input=~PINC&0x02;
 7dc:	86 b1       	in	r24, 0x06	; 6
 7de:	80 95       	com	r24
 7e0:	82 70       	andi	r24, 0x02	; 2
 7e2:	f6 cf       	rjmp	.-20     	; 0x7d0 <SM5_Tick+0x20>
 7e4:	08 95       	ret

000007e6 <main>:
SM3_TICK()-310MS
SM4_TICK()-10MS
*/
int main(void)
{
    DDRB=0xFF;
 7e6:	8f ef       	ldi	r24, 0xFF	; 255
 7e8:	84 b9       	out	0x04, r24	; 4
    PORTB=0x00;
 7ea:	15 b8       	out	0x05, r1	; 5
    DDRC=0x00;
 7ec:	17 b8       	out	0x07, r1	; 7
    PORTC=0xFF;
 7ee:	88 b9       	out	0x08, r24	; 8
    DDRD=0xFF;
 7f0:	8a b9       	out	0x0a, r24	; 10
    PORTD=0x00;
 7f2:	1b b8       	out	0x0b, r1	; 11
    /* Replace with your application code */
    SM1_State=Start1;
 7f4:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <SM1_State>
    SM2_State=Start2;
 7f8:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <SM2_State>
    SM3_State=Start3;
 7fc:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <SM3_State>
    SM4_State=Start4;
 800:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <SM4_State>
    SM5_State=Start5;
 804:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <SM5_State>
    TimerSet(10);
 808:	6a e0       	ldi	r22, 0x0A	; 10
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	80 e0       	ldi	r24, 0x00	; 0
    TimerOn();
    LCD_init();
 80e:	90 e0       	ldi	r25, 0x00	; 0
    A2D_init();
 810:	46 dd       	rcall	.-1396   	; 0x29e <TimerSet>
 812:	e6 dc       	rcall	.-1588   	; 0x1e0 <TimerOn>
    initUSART(1);
 814:	80 dc       	rcall	.-1792   	; 0x116 <LCD_init>
 816:	54 dd       	rcall	.-1368   	; 0x2c0 <A2D_init>
    ADMUX=0;
 818:	81 e0       	ldi	r24, 0x01	; 1
    unsigned char counter=1;
    LCD_DisplayString(1,"CONNECTING....");
 81a:	ae dc       	rcall	.-1700   	; 0x178 <initUSART>
 81c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 820:	63 e1       	ldi	r22, 0x13	; 19
 822:	71 e0       	ldi	r23, 0x01	; 1
    TimerOn();
    LCD_init();
    A2D_init();
    initUSART(1);
    ADMUX=0;
    unsigned char counter=1;
 824:	81 e0       	ldi	r24, 0x01	; 1
    LCD_DisplayString(1,"CONNECTING....");
    while(1)
    {
        if(counter%21==0){
 826:	8f dc       	rcall	.-1762   	; 0x146 <LCD_DisplayString>
 828:	c1 e0       	ldi	r28, 0x01	; 1
            SM2_Tick();
            counter++;
        }
        else if(counter%31==0)
 82a:	17 e8       	ldi	r17, 0x87	; 135
 82c:	d5 e1       	ldi	r29, 0x15	; 21
 82e:	0f 2e       	mov	r0, r31
 830:	f9 e0       	ldi	r31, 0x09	; 9
 832:	ff 2e       	mov	r15, r31
    ADMUX=0;
    unsigned char counter=1;
    LCD_DisplayString(1,"CONNECTING....");
    while(1)
    {
        if(counter%21==0){
 834:	f0 2d       	mov	r31, r0
 836:	0f e1       	ldi	r16, 0x1F	; 31
 838:	c1 9f       	mul	r28, r17
 83a:	91 2d       	mov	r25, r1
 83c:	11 24       	eor	r1, r1
 83e:	8c 2f       	mov	r24, r28
 840:	89 1b       	sub	r24, r25
 842:	86 95       	lsr	r24
 844:	89 0f       	add	r24, r25
 846:	82 95       	swap	r24
 848:	8f 70       	andi	r24, 0x0F	; 15
 84a:	9c 2f       	mov	r25, r28
 84c:	8d 9f       	mul	r24, r29
 84e:	90 19       	sub	r25, r0
            SM2_Tick();
 850:	11 24       	eor	r1, r1
 852:	91 11       	cpse	r25, r1
            counter++;
 854:	03 c0       	rjmp	.+6      	; 0x85c <main+0x76>
 856:	ad dd       	rcall	.-1190   	; 0x3b2 <SM2_Tick>
        }
        else if(counter%31==0)
 858:	cf 5f       	subi	r28, 0xFF	; 255
 85a:	16 c0       	rjmp	.+44     	; 0x888 <main+0xa2>
 85c:	cf 9d       	mul	r28, r15
 85e:	91 2d       	mov	r25, r1
 860:	11 24       	eor	r1, r1
 862:	8c 2f       	mov	r24, r28
 864:	89 1b       	sub	r24, r25
 866:	86 95       	lsr	r24
 868:	89 0f       	add	r24, r25
 86a:	82 95       	swap	r24
 86c:	8f 70       	andi	r24, 0x0F	; 15
        {
            SM3_Tick();
 86e:	9c 2f       	mov	r25, r28
 870:	80 9f       	mul	r24, r16
            counter=1;
 872:	90 19       	sub	r25, r0
 874:	11 24       	eor	r1, r1
        }
        else{
            SM1_Tick();
 876:	91 11       	cpse	r25, r1
 878:	03 c0       	rjmp	.+6      	; 0x880 <main+0x9a>
            SM4_Tick();
 87a:	88 de       	rcall	.-752    	; 0x58c <SM3_Tick>
 87c:	c1 e0       	ldi	r28, 0x01	; 1
            SM5_Tick();
 87e:	04 c0       	rjmp	.+8      	; 0x888 <main+0xa2>
 880:	25 dd       	rcall	.-1462   	; 0x2cc <SM1_Tick>
            counter++;
 882:	80 df       	rcall	.-256    	; 0x784 <SM4_Tick>
        }
        while(!TimerFlag);
 884:	95 df       	rcall	.-214    	; 0x7b0 <SM5_Tick>
 886:	cf 5f       	subi	r28, 0xFF	; 255
 888:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <TimerFlag>
        TimerFlag = 0;
 88c:	88 23       	and	r24, r24
 88e:	e1 f3       	breq	.-8      	; 0x888 <main+0xa2>
    }
 890:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <TimerFlag>
 894:	d1 cf       	rjmp	.-94     	; 0x838 <main+0x52>

00000896 <_exit>:
 896:	f8 94       	cli

00000898 <__stop_program>:
 898:	ff cf       	rjmp	.-2      	; 0x898 <__stop_program>
