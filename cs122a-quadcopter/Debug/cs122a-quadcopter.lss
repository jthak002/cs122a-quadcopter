
cs122a-quadcopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000007d0  00000864  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800132  00800132  00000896  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000896  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000148c  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f2  00000000  00000000  00001e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad7  00000000  00000000  00002866  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00003340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000686  00000000  00000000  00003538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000559  00000000  00000000  00003bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004117  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	f8 c0       	rjmp	.+496    	; 0x226 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ed       	ldi	r30, 0xD0	; 208
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 33       	cpi	r26, 0x32	; 50
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e3       	ldi	r26, 0x32	; 50
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 34       	cpi	r26, 0x45	; 69
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	33 d3       	rcall	.+1638   	; 0x72a <main>
  c4:	83 c3       	rjmp	.+1798   	; 0x7cc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
void TimerOff(){
    TCCR1B = 0x00;
}

void TimerISR(){
    TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	58 98       	cbi	0x0b, 0	; 11
  f0:	85 b9       	out	0x05, r24	; 5
  f2:	59 9a       	sbi	0x0b, 1	; 11
  f4:	00 00       	nop
  f6:	59 98       	cbi	0x0b, 1	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	58 9a       	sbi	0x0b, 0	; 11
 136:	85 b9       	out	0x05, r24	; 5
 138:	59 9a       	sbi	0x0b, 1	; 11
 13a:	00 00       	nop
 13c:	59 98       	cbi	0x0b, 1	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <initUSART>:
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	81 f0       	breq	.+32     	; 0x19c <initUSART+0x24>
 17c:	e1 ec       	ldi	r30, 0xC1	; 193
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	88 61       	ori	r24, 0x18	; 24
 184:	80 83       	st	Z, r24
 186:	e2 ec       	ldi	r30, 0xC2	; 194
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	86 60       	ori	r24, 0x06	; 6
 18e:	80 83       	st	Z, r24
 190:	83 e3       	ldi	r24, 0x33	; 51
 192:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 196:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 19a:	08 95       	ret
 19c:	e9 ec       	ldi	r30, 0xC9	; 201
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	88 61       	ori	r24, 0x18	; 24
 1a4:	80 83       	st	Z, r24
 1a6:	ea ec       	ldi	r30, 0xCA	; 202
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	86 60       	ori	r24, 0x06	; 6
 1ae:	80 83       	st	Z, r24
 1b0:	83 e3       	ldi	r24, 0x33	; 51
 1b2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 1b6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1ba:	08 95       	ret

000001bc <USART_Send>:
 1bc:	61 30       	cpi	r22, 0x01	; 1
 1be:	41 f0       	breq	.+16     	; 0x1d0 <USART_Send+0x14>
 1c0:	e0 ec       	ldi	r30, 0xC0	; 192
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	90 81       	ld	r25, Z
 1c6:	95 ff       	sbrs	r25, 5
 1c8:	fd cf       	rjmp	.-6      	; 0x1c4 <USART_Send+0x8>
 1ca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1ce:	08 95       	ret
 1d0:	e8 ec       	ldi	r30, 0xC8	; 200
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	90 81       	ld	r25, Z
 1d6:	95 ff       	sbrs	r25, 5
 1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <USART_Send+0x18>
 1da:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 1de:	08 95       	ret

000001e0 <TimerOn>:
 1e0:	8b e0       	ldi	r24, 0x0B	; 11
 1e2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1e6:	8d e7       	ldi	r24, 0x7D	; 125
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1ee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1f8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1fc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 200:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 204:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 208:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 20c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 210:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <avr_timer_cntcurr>
 214:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <avr_timer_cntcurr+0x1>
 218:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <avr_timer_cntcurr+0x2>
 21c:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <avr_timer_cntcurr+0x3>
 220:	80 e8       	ldi	r24, 0x80	; 128
 222:	8f bf       	out	0x3f, r24	; 63
 224:	08 95       	ret

00000226 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
 234:	af 93       	push	r26
 236:	bf 93       	push	r27
    avr_timer_cntcurr--;
 238:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <avr_timer_cntcurr>
 23c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <avr_timer_cntcurr+0x1>
 240:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <avr_timer_cntcurr+0x2>
 244:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <avr_timer_cntcurr+0x3>
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	a1 09       	sbc	r26, r1
 24c:	b1 09       	sbc	r27, r1
 24e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <avr_timer_cntcurr>
 252:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <avr_timer_cntcurr+0x1>
 256:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <avr_timer_cntcurr+0x2>
 25a:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <avr_timer_cntcurr+0x3>
    if (avr_timer_cntcurr == 0){
 25e:	89 2b       	or	r24, r25
 260:	8a 2b       	or	r24, r26
 262:	8b 2b       	or	r24, r27
 264:	99 f4       	brne	.+38     	; 0x28c <__vector_13+0x66>
void TimerOff(){
    TCCR1B = 0x00;
}

void TimerISR(){
    TimerFlag = 1;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <TimerFlag>

ISR(TIMER1_COMPA_vect){
    avr_timer_cntcurr--;
    if (avr_timer_cntcurr == 0){
        TimerISR();
        avr_timer_cntcurr = avr_timer_M;      
 26c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 270:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 274:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 278:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 27c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <avr_timer_cntcurr>
 280:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <avr_timer_cntcurr+0x1>
 284:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <avr_timer_cntcurr+0x2>
 288:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <avr_timer_cntcurr+0x3>
    }
}
 28c:	bf 91       	pop	r27
 28e:	af 91       	pop	r26
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <TimerSet>:

void TimerSet(unsigned long M){
    avr_timer_M = M;
 29e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 2a2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 2a6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 2aa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    avr_timer_cntcurr = avr_timer_M;
 2ae:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <avr_timer_cntcurr>
 2b2:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <avr_timer_cntcurr+0x1>
 2b6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <avr_timer_cntcurr+0x2>
 2ba:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <avr_timer_cntcurr+0x3>
 2be:	08 95       	ret

000002c0 <A2D_init>:
    
}
/*************ADC FUNCTION**************/
void A2D_init() {
    ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 2c0:	ea e7       	ldi	r30, 0x7A	; 122
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	80 6e       	ori	r24, 0xE0	; 224
 2c8:	80 83       	st	Z, r24
 2ca:	08 95       	ret

000002cc <SM1_Tick>:
enum SM1_States{Start1,read_joystick}SM1_State;
signed char adc_inputs[4];
unsigned char adcmux_state=0;
unsigned short input=0;
void SM1_Tick(){
    switch(SM1_State){
 2cc:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <SM1_State>
 2d0:	88 23       	and	r24, r24
 2d2:	19 f0       	breq	.+6      	; 0x2da <SM1_Tick+0xe>
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	51 f0       	breq	.+20     	; 0x2ec <SM1_Tick+0x20>
 2d8:	10 c0       	rjmp	.+32     	; 0x2fa <SM1_Tick+0x2e>
        case Start1:
            if(RUN_CODE)
 2da:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <RUN_CODE>
 2de:	88 23       	and	r24, r24
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <SM1_Tick+0x18>
 2e2:	66 c0       	rjmp	.+204    	; 0x3b0 <SM1_Tick+0xe4>
                SM1_State=read_joystick;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <SM1_State>
 2ea:	0a c0       	rjmp	.+20     	; 0x300 <SM1_Tick+0x34>
            else
                SM1_State=Start1;
            break;
        case read_joystick:
            if(RUN_CODE)
 2ec:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <RUN_CODE>
 2f0:	81 11       	cpse	r24, r1
 2f2:	06 c0       	rjmp	.+12     	; 0x300 <SM1_Tick+0x34>
                SM1_State=read_joystick;
            else
                SM1_State=Start1;
 2f4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <SM1_State>
 2f8:	08 95       	ret
            break;
        default:break;
    }
    switch(SM1_State){
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	09 f0       	breq	.+2      	; 0x300 <SM1_Tick+0x34>
 2fe:	58 c0       	rjmp	.+176    	; 0x3b0 <SM1_Tick+0xe4>
        case read_joystick:
        input=ADC;
 300:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 304:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 308:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <input+0x1>
 30c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <input>
        if(adcmux_state==3)
 310:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <adcmux_state>
 314:	83 30       	cpi	r24, 0x03	; 3
 316:	19 f4       	brne	.+6      	; 0x31e <SM1_Tick+0x52>
        ADMUX=0;
 318:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 31c:	03 c0       	rjmp	.+6      	; 0x324 <SM1_Tick+0x58>
        else
        ADMUX=adcmux_state+1;
 31e:	8f 5f       	subi	r24, 0xFF	; 255
 320:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
        if(input>550 && input<828)
 324:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <input>
 328:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <input+0x1>
 32c:	9c 01       	movw	r18, r24
 32e:	27 52       	subi	r18, 0x27	; 39
 330:	32 40       	sbci	r19, 0x02	; 2
 332:	25 31       	cpi	r18, 0x15	; 21
 334:	31 40       	sbci	r19, 0x01	; 1
 336:	40 f4       	brcc	.+16     	; 0x348 <SM1_Tick+0x7c>
        adc_inputs[adcmux_state]=1;
 338:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <adcmux_state>
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	e0 5c       	subi	r30, 0xC0	; 192
 340:	fe 4f       	sbci	r31, 0xFE	; 254
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	80 83       	st	Z, r24
 346:	2a c0       	rjmp	.+84     	; 0x39c <SM1_Tick+0xd0>
        else if(input>828)
 348:	8d 33       	cpi	r24, 0x3D	; 61
 34a:	23 e0       	ldi	r18, 0x03	; 3
 34c:	92 07       	cpc	r25, r18
 34e:	40 f0       	brcs	.+16     	; 0x360 <SM1_Tick+0x94>
        adc_inputs[adcmux_state]=2;
 350:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <adcmux_state>
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	e0 5c       	subi	r30, 0xC0	; 192
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	80 83       	st	Z, r24
 35e:	1e c0       	rjmp	.+60     	; 0x39c <SM1_Tick+0xd0>
        else if(input<250)
 360:	8a 3f       	cpi	r24, 0xFA	; 250
 362:	91 05       	cpc	r25, r1
 364:	40 f4       	brcc	.+16     	; 0x376 <SM1_Tick+0xaa>
        adc_inputs[adcmux_state]=-2;
 366:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <adcmux_state>
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	e0 5c       	subi	r30, 0xC0	; 192
 36e:	fe 4f       	sbci	r31, 0xFE	; 254
 370:	8e ef       	ldi	r24, 0xFE	; 254
 372:	80 83       	st	Z, r24
 374:	13 c0       	rjmp	.+38     	; 0x39c <SM1_Tick+0xd0>
        else if(input>250 && input<470)
 376:	8b 5f       	subi	r24, 0xFB	; 251
 378:	91 09       	sbc	r25, r1
 37a:	8b 3d       	cpi	r24, 0xDB	; 219
 37c:	91 05       	cpc	r25, r1
 37e:	40 f4       	brcc	.+16     	; 0x390 <SM1_Tick+0xc4>
        adc_inputs[adcmux_state]=-1;
 380:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <adcmux_state>
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	e0 5c       	subi	r30, 0xC0	; 192
 388:	fe 4f       	sbci	r31, 0xFE	; 254
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	80 83       	st	Z, r24
 38e:	06 c0       	rjmp	.+12     	; 0x39c <SM1_Tick+0xd0>
        else
        adc_inputs[adcmux_state]=0;
 390:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <adcmux_state>
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	e0 5c       	subi	r30, 0xC0	; 192
 398:	fe 4f       	sbci	r31, 0xFE	; 254
 39a:	10 82       	st	Z, r1
        if(adcmux_state==3)
 39c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <adcmux_state>
 3a0:	83 30       	cpi	r24, 0x03	; 3
 3a2:	19 f4       	brne	.+6      	; 0x3aa <SM1_Tick+0xde>
        adcmux_state=0;
 3a4:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <adcmux_state>
 3a8:	08 95       	ret
        else
        adcmux_state+=1;
 3aa:	8f 5f       	subi	r24, 0xFF	; 255
 3ac:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <adcmux_state>
 3b0:	08 95       	ret

000003b2 <SM2_Tick>:
}
//UPDATES THE VALUES ONTO THE LCD SCREEN
//EITHER SHOWS 'CONNECTING...' OR THE VLAUES OF 
//THROTTLE,PITCH,YAW AND ROLL
enum SM2_States{Start2,led_prep,led_display}SM2_State;
void SM2_Tick(){
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	2f 97       	sbiw	r28, 0x0f	; 15
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
    switch(SM2_State){
 3cc:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <SM2_State>
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	61 f0       	breq	.+24     	; 0x3ec <SM2_Tick+0x3a>
 3d4:	18 f0       	brcs	.+6      	; 0x3dc <SM2_Tick+0x2a>
 3d6:	82 30       	cpi	r24, 0x02	; 2
 3d8:	69 f0       	breq	.+26     	; 0x3f4 <SM2_Tick+0x42>
 3da:	13 c0       	rjmp	.+38     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
        case Start2:
            if(RUN_CODE)
 3dc:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <RUN_CODE>
 3e0:	88 23       	and	r24, r24
 3e2:	b1 f0       	breq	.+44     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
                SM2_State=led_prep;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <SM2_State>
 3ea:	18 c0       	rjmp	.+48     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
            else
                SM2_State=Start2;
            break;
        case led_prep:
            SM2_State=led_display;
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <SM2_State>
            break;
 3f2:	30 c0       	rjmp	.+96     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
        case led_display:
            if(RUN_CODE)
 3f4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <RUN_CODE>
 3f8:	81 11       	cpse	r24, r1
 3fa:	2c c0       	rjmp	.+88     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
                SM2_State=led_display;
            else
                SM2_State=Start2;
 3fc:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <SM2_State>
 400:	07 c0       	rjmp	.+14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
            break;
        default:break;
    }
    switch(SM2_State){
 402:	81 30       	cpi	r24, 0x01	; 1
 404:	59 f0       	breq	.+22     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 406:	20 f0       	brcs	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 408:	82 30       	cpi	r24, 0x02	; 2
 40a:	09 f0       	breq	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	89 c0       	rjmp	.+274    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
        
        case Start2:
            LCD_ClearScreen();
 40e:	22 c0       	rjmp	.+68     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
            LCD_DisplayString(1,"CONNECTING....");
 410:	77 de       	rcall	.-786    	; 0x100 <LCD_ClearScreen>
 412:	63 e1       	ldi	r22, 0x13	; 19
 414:	71 e0       	ldi	r23, 0x01	; 1
            break;
 416:	81 e0       	ldi	r24, 0x01	; 1
            
        //Prepares the LCD Display for displaying controller Data
        case led_prep:
            LCD_ClearScreen();
 418:	96 de       	rcall	.-724    	; 0x146 <LCD_DisplayString>
            LCD_DisplayString(1,"Thrtl: 0 Yaw: 0");
 41a:	82 c0       	rjmp	.+260    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 41c:	71 de       	rcall	.-798    	; 0x100 <LCD_ClearScreen>
 41e:	62 e2       	ldi	r22, 0x22	; 34
 420:	71 e0       	ldi	r23, 0x01	; 1
            unsigned char second_string []={'P','t','c','h',':',' ','0',' ','R','o','l','l',':',' ','0'};
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 de       	rcall	.-736    	; 0x146 <LCD_DisplayString>
 426:	8f e0       	ldi	r24, 0x0F	; 15
 428:	e4 e0       	ldi	r30, 0x04	; 4
 42a:	f1 e0       	ldi	r31, 0x01	; 1
 42c:	de 01       	movw	r26, r28
 42e:	11 96       	adiw	r26, 0x01	; 1
 430:	01 90       	ld	r0, Z+
 432:	0d 92       	st	X+, r0
 434:	8a 95       	dec	r24
 436:	e1 f7       	brne	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 438:	ce 01       	movw	r24, r28
            for(int m=0;m<15;m++)
            {
                LCD_Cursor(17+m);
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	7c 01       	movw	r14, r24
                LCD_WriteData(second_string[m]);
 43e:	11 e1       	ldi	r17, 0x11	; 17
 440:	81 2f       	mov	r24, r17
 442:	61 de       	rcall	.-830    	; 0x106 <LCD_Cursor>
 444:	f7 01       	movw	r30, r14
 446:	81 91       	ld	r24, Z+
        //Prepares the LCD Display for displaying controller Data
        case led_prep:
            LCD_ClearScreen();
            LCD_DisplayString(1,"Thrtl: 0 Yaw: 0");
            unsigned char second_string []={'P','t','c','h',':',' ','0',' ','R','o','l','l',':',' ','0'};
            for(int m=0;m<15;m++)
 448:	7f 01       	movw	r14, r30
 44a:	74 de       	rcall	.-792    	; 0x134 <LCD_WriteData>
 44c:	1f 5f       	subi	r17, 0xFF	; 255
            break;
            
        //DISPLAYS THE CONTROLLER DATA-->DATA THAT THE CONTROLLER SENDS OVER THE BLUETOOTH
        case led_display:
        //Displaying the THROTTLE_DATA
        LCD_Cursor(7);
 44e:	10 32       	cpi	r17, 0x20	; 32
 450:	b9 f7       	brne	.-18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
        if(adc_inputs[3]<0){
 452:	66 c0       	rjmp	.+204    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 454:	87 e0       	ldi	r24, 0x07	; 7
            LCD_WriteData('-');
 456:	57 de       	rcall	.-850    	; 0x106 <LCD_Cursor>
 458:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <adc_inputs+0x3>
 45c:	88 23       	and	r24, r24
        }
        else
            LCD_WriteData(' ');
 45e:	1c f4       	brge	.+6      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 460:	8d e2       	ldi	r24, 0x2D	; 45
 462:	68 de       	rcall	.-816    	; 0x134 <LCD_WriteData>
        LCD_Cursor(8);
 464:	02 c0       	rjmp	.+4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 466:	80 e2       	ldi	r24, 0x20	; 32
 468:	65 de       	rcall	.-822    	; 0x134 <LCD_WriteData>
        LCD_WriteData(48+abs(adc_inputs[3]));
 46a:	88 e0       	ldi	r24, 0x08	; 8
 46c:	4c de       	rcall	.-872    	; 0x106 <LCD_Cursor>
 46e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <adc_inputs+0x3>
 472:	08 2e       	mov	r0, r24
 474:	00 0c       	add	r0, r0
 476:	99 0b       	sbc	r25, r25
 478:	99 23       	and	r25, r25
 47a:	1c f4       	brge	.+6      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
        //Displaying the YAW_DATA
        LCD_Cursor(14);
 47c:	91 95       	neg	r25
 47e:	81 95       	neg	r24
        if(adc_inputs[2]<0)
 480:	91 09       	sbc	r25, r1
 482:	80 5d       	subi	r24, 0xD0	; 208
 484:	57 de       	rcall	.-850    	; 0x134 <LCD_WriteData>
 486:	8e e0       	ldi	r24, 0x0E	; 14
            LCD_WriteData('-');
 488:	3e de       	rcall	.-900    	; 0x106 <LCD_Cursor>
 48a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <adc_inputs+0x2>
 48e:	88 23       	and	r24, r24
        else
            LCD_WriteData(' ');
 490:	1c f4       	brge	.+6      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 492:	8d e2       	ldi	r24, 0x2D	; 45
        LCD_Cursor(15);
 494:	4f de       	rcall	.-866    	; 0x134 <LCD_WriteData>
 496:	02 c0       	rjmp	.+4      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
        LCD_WriteData(48+abs(adc_inputs[2]));
 498:	80 e2       	ldi	r24, 0x20	; 32
 49a:	4c de       	rcall	.-872    	; 0x134 <LCD_WriteData>
 49c:	8f e0       	ldi	r24, 0x0F	; 15
 49e:	33 de       	rcall	.-922    	; 0x106 <LCD_Cursor>
 4a0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <adc_inputs+0x2>
 4a4:	08 2e       	mov	r0, r24
 4a6:	00 0c       	add	r0, r0
 4a8:	99 0b       	sbc	r25, r25
 4aa:	99 23       	and	r25, r25
        //Displaying the PITCH_DATA
        LCD_Cursor(22);
 4ac:	1c f4       	brge	.+6      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4ae:	91 95       	neg	r25
 4b0:	81 95       	neg	r24
        if(adc_inputs[1]<0)
 4b2:	91 09       	sbc	r25, r1
 4b4:	80 5d       	subi	r24, 0xD0	; 208
 4b6:	3e de       	rcall	.-900    	; 0x134 <LCD_WriteData>
 4b8:	86 e1       	ldi	r24, 0x16	; 22
            LCD_WriteData('-');
 4ba:	25 de       	rcall	.-950    	; 0x106 <LCD_Cursor>
 4bc:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <adc_inputs+0x1>
        else
            LCD_WriteData(' ');
 4c0:	88 23       	and	r24, r24
 4c2:	1c f4       	brge	.+6      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
        LCD_Cursor(23);
 4c4:	8d e2       	ldi	r24, 0x2D	; 45
 4c6:	36 de       	rcall	.-916    	; 0x134 <LCD_WriteData>
        LCD_WriteData(48+abs(adc_inputs[1]));
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4ca:	80 e2       	ldi	r24, 0x20	; 32
 4cc:	33 de       	rcall	.-922    	; 0x134 <LCD_WriteData>
 4ce:	87 e1       	ldi	r24, 0x17	; 23
 4d0:	1a de       	rcall	.-972    	; 0x106 <LCD_Cursor>
 4d2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <adc_inputs+0x1>
 4d6:	08 2e       	mov	r0, r24
 4d8:	00 0c       	add	r0, r0
 4da:	99 0b       	sbc	r25, r25
 4dc:	99 23       	and	r25, r25
        //Displaying the ROLL_DATA
        LCD_Cursor(30);
 4de:	1c f4       	brge	.+6      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e0:	91 95       	neg	r25
        if(adc_inputs[0]<0)
 4e2:	81 95       	neg	r24
 4e4:	91 09       	sbc	r25, r1
            LCD_WriteData('-');
 4e6:	80 5d       	subi	r24, 0xD0	; 208
 4e8:	25 de       	rcall	.-950    	; 0x134 <LCD_WriteData>
 4ea:	8e e1       	ldi	r24, 0x1E	; 30
 4ec:	0c de       	rcall	.-1000   	; 0x106 <LCD_Cursor>
        else
            LCD_WriteData(' ');
 4ee:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <adc_inputs>
 4f2:	88 23       	and	r24, r24
        LCD_Cursor(31);
 4f4:	1c f4       	brge	.+6      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4f6:	8d e2       	ldi	r24, 0x2D	; 45
 4f8:	1d de       	rcall	.-966    	; 0x134 <LCD_WriteData>
        LCD_WriteData(48+abs(adc_inputs[0]));   
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4fc:	80 e2       	ldi	r24, 0x20	; 32
 4fe:	1a de       	rcall	.-972    	; 0x134 <LCD_WriteData>
 500:	8f e1       	ldi	r24, 0x1F	; 31
 502:	01 de       	rcall	.-1022   	; 0x106 <LCD_Cursor>
 504:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <adc_inputs>
 508:	08 2e       	mov	r0, r24
 50a:	00 0c       	add	r0, r0
 50c:	99 0b       	sbc	r25, r25
 50e:	99 23       	and	r25, r25
 510:	1c f4       	brge	.+6      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 512:	91 95       	neg	r25
        LCD_Cursor(32);          
 514:	81 95       	neg	r24
 516:	91 09       	sbc	r25, r1
 518:	80 5d       	subi	r24, 0xD0	; 208
        break;
        
        default:break;
    }
}
 51a:	0c de       	rcall	.-1000   	; 0x134 <LCD_WriteData>
 51c:	80 e2       	ldi	r24, 0x20	; 32
 51e:	f3 dd       	rcall	.-1050   	; 0x106 <LCD_Cursor>
 520:	2f 96       	adiw	r28, 0x0f	; 15
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	f8 94       	cli
 526:	de bf       	out	0x3e, r29	; 62
 528:	0f be       	out	0x3f, r0	; 63
 52a:	cd bf       	out	0x3d, r28	; 61
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	1f 91       	pop	r17
 532:	ff 90       	pop	r15
 534:	ef 90       	pop	r14
 536:	08 95       	ret

00000538 <SM3_Tick>:
//TRANSMITS THE DATA FROM THE JOYSTIUCKS TO THE FLIGHT CONTROLLER. 
//EVERY OTHER CLOCK_PERIOD THE DATA FOR PITCH-ROLL OR THROTTLE-YAW IS TRANSMITTED
enum SM3_States{Start3, controller_send}SM3_State;
unsigned char send_val=0x00;
void SM3_Tick(){
    switch(SM3_State)
 538:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <SM3_State>
 53c:	88 23       	and	r24, r24
 53e:	19 f0       	breq	.+6      	; 0x546 <SM3_Tick+0xe>
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	51 f0       	breq	.+20     	; 0x558 <SM3_Tick+0x20>
 544:	10 c0       	rjmp	.+32     	; 0x566 <SM3_Tick+0x2e>
    {
        case Start3:
            if(RUN_CODE)
 546:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <RUN_CODE>
 54a:	88 23       	and	r24, r24
 54c:	09 f4       	brne	.+2      	; 0x550 <SM3_Tick+0x18>
 54e:	d6 c0       	rjmp	.+428    	; 0x6fc <SM3_Tick+0x1c4>
                SM3_State=controller_send;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <SM3_State>
 556:	0a c0       	rjmp	.+20     	; 0x56c <SM3_Tick+0x34>
            else
                SM3_State=Start3;
            break;
        case controller_send:
            if(RUN_CODE)
 558:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <RUN_CODE>
 55c:	81 11       	cpse	r24, r1
 55e:	06 c0       	rjmp	.+12     	; 0x56c <SM3_Tick+0x34>
            SM3_State=controller_send;
            else
            SM3_State=Start3;
 560:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <SM3_State>
 564:	08 95       	ret
            break;
        default:break;
    }
    switch(SM3_State){
 566:	81 30       	cpi	r24, 0x01	; 1
 568:	09 f0       	breq	.+2      	; 0x56c <SM3_Tick+0x34>
 56a:	c8 c0       	rjmp	.+400    	; 0x6fc <SM3_Tick+0x1c4>
        case controller_send:
            //CHECK IF USER HAS INITIATED DISABLE_QUAD_VARIABLE TO 
            //GROUND THE QUADCOPTER VIA GRADUAL DESCENT 
            if(DISABLE_QUAD==0x00)
 56c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <DISABLE_QUAD>
 570:	81 11       	cpse	r24, r1
 572:	b8 c0       	rjmp	.+368    	; 0x6e4 <SM3_Tick+0x1ac>
            {
                if(send_val)
 574:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 578:	88 23       	and	r24, r24
 57a:	09 f4       	brne	.+2      	; 0x57e <SM3_Tick+0x46>
 57c:	57 c0       	rjmp	.+174    	; 0x62c <SM3_Tick+0xf4>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 57e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
                {
                    //TRANSMIT ROLL CONTROLLER INPUT TO QUAD
                    if(USART_IsSendReady(1))
 582:	85 ff       	sbrs	r24, 5
 584:	27 c0       	rjmp	.+78     	; 0x5d4 <SM3_Tick+0x9c>
                    {
                        //ADC_INPUTS[0] HAVE ROLL VALUES STORED IN THEM
                        switch(adc_inputs[0])
 586:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <adc_inputs>
 58a:	88 23       	and	r24, r24
 58c:	99 f0       	breq	.+38     	; 0x5b4 <SM3_Tick+0x7c>
 58e:	2c f4       	brge	.+10     	; 0x59a <SM3_Tick+0x62>
 590:	8e 3f       	cpi	r24, 0xFE	; 254
 592:	41 f0       	breq	.+16     	; 0x5a4 <SM3_Tick+0x6c>
 594:	8f 3f       	cpi	r24, 0xFF	; 255
 596:	51 f0       	breq	.+20     	; 0x5ac <SM3_Tick+0x74>
 598:	18 c0       	rjmp	.+48     	; 0x5ca <SM3_Tick+0x92>
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	79 f0       	breq	.+30     	; 0x5bc <SM3_Tick+0x84>
 59e:	82 30       	cpi	r24, 0x02	; 2
 5a0:	89 f0       	breq	.+34     	; 0x5c4 <SM3_Tick+0x8c>
 5a2:	13 c0       	rjmp	.+38     	; 0x5ca <SM3_Tick+0x92>
                        {
                            case -2:
                                USART_Send(ROLL_LEFT_2,1);
 5a4:	61 e0       	ldi	r22, 0x01	; 1
 5a6:	82 ec       	ldi	r24, 0xC2	; 194
 5a8:	09 de       	rcall	.-1006   	; 0x1bc <USART_Send>
                                break;
 5aa:	0f c0       	rjmp	.+30     	; 0x5ca <SM3_Tick+0x92>
                            case -1:
                                USART_Send(ROLL_LEFT_1,1);
 5ac:	61 e0       	ldi	r22, 0x01	; 1
 5ae:	81 ec       	ldi	r24, 0xC1	; 193
 5b0:	05 de       	rcall	.-1014   	; 0x1bc <USART_Send>
                                break;
                            case 0:
                                USART_Send(ROLL_NEUTRAL,1);
 5b2:	0b c0       	rjmp	.+22     	; 0x5ca <SM3_Tick+0x92>
 5b4:	61 e0       	ldi	r22, 0x01	; 1
                                break;
                            case 1:
                                USART_Send(ROLL_RIGHT_1,1);
 5b6:	80 ec       	ldi	r24, 0xC0	; 192
 5b8:	01 de       	rcall	.-1022   	; 0x1bc <USART_Send>
 5ba:	07 c0       	rjmp	.+14     	; 0x5ca <SM3_Tick+0x92>
                                break;
 5bc:	61 e0       	ldi	r22, 0x01	; 1
                            case 2:
                                USART_Send(ROLL_RIGHT_2,1);
 5be:	84 ec       	ldi	r24, 0xC4	; 196
 5c0:	fd dd       	rcall	.-1030   	; 0x1bc <USART_Send>
 5c2:	03 c0       	rjmp	.+6      	; 0x5ca <SM3_Tick+0x92>
 5c4:	61 e0       	ldi	r22, 0x01	; 1
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 5c6:	8c ec       	ldi	r24, 0xCC	; 204
 5c8:	f9 dd       	rcall	.-1038   	; 0x1bc <USART_Send>
 5ca:	e8 ec       	ldi	r30, 0xC8	; 200
                                break;
                            default:break;
                        }
                        while(!USART_HasTransmitted(1));
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 5d0:	86 ff       	sbrs	r24, 6
 5d2:	fd cf       	rjmp	.-6      	; 0x5ce <SM3_Tick+0x96>
                    }
                    //TRANSMIT ROLL CONTROLLER INPUT TO QUAD
                    if(USART_IsSendReady(1))
 5d4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
                    {
                        switch(adc_inputs[1]){
 5d8:	85 ff       	sbrs	r24, 5
 5da:	7e c0       	rjmp	.+252    	; 0x6d8 <SM3_Tick+0x1a0>
 5dc:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <adc_inputs+0x1>
 5e0:	88 23       	and	r24, r24
 5e2:	99 f0       	breq	.+38     	; 0x60a <SM3_Tick+0xd2>
 5e4:	2c f4       	brge	.+10     	; 0x5f0 <SM3_Tick+0xb8>
 5e6:	8e 3f       	cpi	r24, 0xFE	; 254
 5e8:	41 f0       	breq	.+16     	; 0x5fa <SM3_Tick+0xc2>
 5ea:	8f 3f       	cpi	r24, 0xFF	; 255
 5ec:	51 f0       	breq	.+20     	; 0x602 <SM3_Tick+0xca>
 5ee:	18 c0       	rjmp	.+48     	; 0x620 <SM3_Tick+0xe8>
 5f0:	81 30       	cpi	r24, 0x01	; 1
 5f2:	79 f0       	breq	.+30     	; 0x612 <SM3_Tick+0xda>
                            case -2:
                                USART_Send(PITCH_BCK_2,1);
 5f4:	82 30       	cpi	r24, 0x02	; 2
 5f6:	89 f0       	breq	.+34     	; 0x61a <SM3_Tick+0xe2>
 5f8:	13 c0       	rjmp	.+38     	; 0x620 <SM3_Tick+0xe8>
                                break;
                            case -1:
                                USART_Send(PITCH_BCK_1,1);
 5fa:	61 e0       	ldi	r22, 0x01	; 1
 5fc:	8c e4       	ldi	r24, 0x4C	; 76
                                break;
                            case 0:
                                USART_Send(PITCH_NEUTRAL,1);
 5fe:	de dd       	rcall	.-1092   	; 0x1bc <USART_Send>
 600:	0f c0       	rjmp	.+30     	; 0x620 <SM3_Tick+0xe8>
 602:	61 e0       	ldi	r22, 0x01	; 1
                                break;
 604:	84 e4       	ldi	r24, 0x44	; 68
                            case 1:
                                USART_Send(PITCH_FWD_1,1);
 606:	da dd       	rcall	.-1100   	; 0x1bc <USART_Send>
 608:	0b c0       	rjmp	.+22     	; 0x620 <SM3_Tick+0xe8>
 60a:	61 e0       	ldi	r22, 0x01	; 1
 60c:	80 e4       	ldi	r24, 0x40	; 64
                                break;
 60e:	d6 dd       	rcall	.-1108   	; 0x1bc <USART_Send>
                            case 2:
                                USART_Send(PITCH_FWD_2,1);
 610:	07 c0       	rjmp	.+14     	; 0x620 <SM3_Tick+0xe8>
 612:	61 e0       	ldi	r22, 0x01	; 1
 614:	81 e4       	ldi	r24, 0x41	; 65
 616:	d2 dd       	rcall	.-1116   	; 0x1bc <USART_Send>
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 618:	03 c0       	rjmp	.+6      	; 0x620 <SM3_Tick+0xe8>
 61a:	61 e0       	ldi	r22, 0x01	; 1
 61c:	83 e4       	ldi	r24, 0x43	; 67
                                break;
                        }
                        while(!USART_HasTransmitted(1));
 61e:	ce dd       	rcall	.-1124   	; 0x1bc <USART_Send>
 620:	e8 ec       	ldi	r30, 0xC8	; 200
 622:	f0 e0       	ldi	r31, 0x00	; 0
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 624:	80 81       	ld	r24, Z
 626:	86 ff       	sbrs	r24, 6
                    }
                } 
                else{                    
                    //TRANSMIT YAW CONTROLLER INPUT TO QUAD
                    if(USART_IsSendReady(1))
 628:	fd cf       	rjmp	.-6      	; 0x624 <SM3_Tick+0xec>
 62a:	56 c0       	rjmp	.+172    	; 0x6d8 <SM3_Tick+0x1a0>
                    {
                        switch(adc_inputs[2]){
 62c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 630:	85 ff       	sbrs	r24, 5
 632:	27 c0       	rjmp	.+78     	; 0x682 <SM3_Tick+0x14a>
 634:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <adc_inputs+0x2>
 638:	88 23       	and	r24, r24
 63a:	99 f0       	breq	.+38     	; 0x662 <SM3_Tick+0x12a>
 63c:	2c f4       	brge	.+10     	; 0x648 <SM3_Tick+0x110>
 63e:	8e 3f       	cpi	r24, 0xFE	; 254
 640:	41 f0       	breq	.+16     	; 0x652 <SM3_Tick+0x11a>
 642:	8f 3f       	cpi	r24, 0xFF	; 255
                            case -2:
                            USART_Send(YAW_LEFT_2,1);
 644:	51 f0       	breq	.+20     	; 0x65a <SM3_Tick+0x122>
 646:	18 c0       	rjmp	.+48     	; 0x678 <SM3_Tick+0x140>
                            break;
                            case -1:
                            USART_Send(YAW_LEFT_1,1);
 648:	81 30       	cpi	r24, 0x01	; 1
 64a:	79 f0       	breq	.+30     	; 0x66a <SM3_Tick+0x132>
 64c:	82 30       	cpi	r24, 0x02	; 2
                            break;
 64e:	89 f0       	breq	.+34     	; 0x672 <SM3_Tick+0x13a>
                            case 0:
                            USART_Send(YAW_NEUTRAL,1);
 650:	13 c0       	rjmp	.+38     	; 0x678 <SM3_Tick+0x140>
 652:	61 e0       	ldi	r22, 0x01	; 1
 654:	8c e3       	ldi	r24, 0x3C	; 60
 656:	b2 dd       	rcall	.-1180   	; 0x1bc <USART_Send>
                            break;
 658:	0f c0       	rjmp	.+30     	; 0x678 <SM3_Tick+0x140>
                            case 1:
                            USART_Send(YAW_RIGHT_1,1);
 65a:	61 e0       	ldi	r22, 0x01	; 1
 65c:	84 e3       	ldi	r24, 0x34	; 52
 65e:	ae dd       	rcall	.-1188   	; 0x1bc <USART_Send>
 660:	0b c0       	rjmp	.+22     	; 0x678 <SM3_Tick+0x140>
                            break;
 662:	61 e0       	ldi	r22, 0x01	; 1
                            case 2:
                            USART_Send(YAW_RIGHT_2,1);
 664:	80 e3       	ldi	r24, 0x30	; 48
 666:	aa dd       	rcall	.-1196   	; 0x1bc <USART_Send>
 668:	07 c0       	rjmp	.+14     	; 0x678 <SM3_Tick+0x140>
 66a:	61 e0       	ldi	r22, 0x01	; 1
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 66c:	81 e3       	ldi	r24, 0x31	; 49
 66e:	a6 dd       	rcall	.-1204   	; 0x1bc <USART_Send>
 670:	03 c0       	rjmp	.+6      	; 0x678 <SM3_Tick+0x140>
                            break;
                        }
                        while(!USART_HasTransmitted(1));
 672:	61 e0       	ldi	r22, 0x01	; 1
 674:	83 e3       	ldi	r24, 0x33	; 51
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 676:	a2 dd       	rcall	.-1212   	; 0x1bc <USART_Send>
 678:	e8 ec       	ldi	r30, 0xC8	; 200
                    }
                    //TRANSMIT THROTTLE CONTROLLER INPUT TO QUAD
                    if(USART_IsSendReady(1))
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 81       	ld	r24, Z
                    {
                        switch(adc_inputs[3]){
 67e:	86 ff       	sbrs	r24, 6
 680:	fd cf       	rjmp	.-6      	; 0x67c <SM3_Tick+0x144>
 682:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 686:	85 ff       	sbrs	r24, 5
 688:	27 c0       	rjmp	.+78     	; 0x6d8 <SM3_Tick+0x1a0>
 68a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <adc_inputs+0x3>
 68e:	88 23       	and	r24, r24
 690:	99 f0       	breq	.+38     	; 0x6b8 <SM3_Tick+0x180>
 692:	2c f4       	brge	.+10     	; 0x69e <SM3_Tick+0x166>
                            case -2:
                            USART_Send(THROTTLE_DWN_2,1);
 694:	8e 3f       	cpi	r24, 0xFE	; 254
 696:	41 f0       	breq	.+16     	; 0x6a8 <SM3_Tick+0x170>
 698:	8f 3f       	cpi	r24, 0xFF	; 255
                            break;
 69a:	51 f0       	breq	.+20     	; 0x6b0 <SM3_Tick+0x178>
                            case -1:
                            USART_Send(THROTTLE_DWN_1,1);
 69c:	18 c0       	rjmp	.+48     	; 0x6ce <SM3_Tick+0x196>
 69e:	81 30       	cpi	r24, 0x01	; 1
 6a0:	79 f0       	breq	.+30     	; 0x6c0 <SM3_Tick+0x188>
 6a2:	82 30       	cpi	r24, 0x02	; 2
                            break;
 6a4:	89 f0       	breq	.+34     	; 0x6c8 <SM3_Tick+0x190>
                            case 0:
                            USART_Send(THROTTLE_NEUTRAL,1);
 6a6:	13 c0       	rjmp	.+38     	; 0x6ce <SM3_Tick+0x196>
 6a8:	61 e0       	ldi	r22, 0x01	; 1
 6aa:	8c e1       	ldi	r24, 0x1C	; 28
 6ac:	87 dd       	rcall	.-1266   	; 0x1bc <USART_Send>
                            break;
 6ae:	0f c0       	rjmp	.+30     	; 0x6ce <SM3_Tick+0x196>
                            case 1:
                            USART_Send(THROTTLE_UP_1,1);
 6b0:	61 e0       	ldi	r22, 0x01	; 1
 6b2:	84 e1       	ldi	r24, 0x14	; 20
 6b4:	83 dd       	rcall	.-1274   	; 0x1bc <USART_Send>
 6b6:	0b c0       	rjmp	.+22     	; 0x6ce <SM3_Tick+0x196>
                            break;
 6b8:	61 e0       	ldi	r22, 0x01	; 1
                            case 2:
                            USART_Send(THROTTLE_UP_2,1);
 6ba:	80 e1       	ldi	r24, 0x10	; 16
 6bc:	7f dd       	rcall	.-1282   	; 0x1bc <USART_Send>
 6be:	07 c0       	rjmp	.+14     	; 0x6ce <SM3_Tick+0x196>
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 6c0:	61 e0       	ldi	r22, 0x01	; 1
 6c2:	81 e1       	ldi	r24, 0x11	; 17
 6c4:	7b dd       	rcall	.-1290   	; 0x1bc <USART_Send>
                            break;
                        }
                        while(!USART_HasTransmitted(1));
 6c6:	03 c0       	rjmp	.+6      	; 0x6ce <SM3_Tick+0x196>
 6c8:	61 e0       	ldi	r22, 0x01	; 1
                    }
                }
                send_val=~send_val;                        
 6ca:	83 e1       	ldi	r24, 0x13	; 19
 6cc:	77 dd       	rcall	.-1298   	; 0x1bc <USART_Send>
 6ce:	e8 ec       	ldi	r30, 0xC8	; 200
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	86 ff       	sbrs	r24, 6
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <SM3_Tick+0x19a>
 6d8:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
            }
            //TRANSMIT GROUNDING CODE
            else
            {
                if(USART_IsSendReady(1))
 6dc:	80 95       	com	r24
                USART_Send(ERROR_HALT,1);
 6de:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
 6e2:	08 95       	ret
 6e4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 6e8:	85 ff       	sbrs	r24, 5
 6ea:	03 c0       	rjmp	.+6      	; 0x6f2 <SM3_Tick+0x1ba>
                while(!USART_HasTransmitted(1));
 6ec:	61 e0       	ldi	r22, 0x01	; 1
 6ee:	8f ef       	ldi	r24, 0xFF	; 255
 6f0:	65 dd       	rcall	.-1334   	; 0x1bc <USART_Send>
 6f2:	e8 ec       	ldi	r30, 0xC8	; 200
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	86 ff       	sbrs	r24, 6
 6fa:	fd cf       	rjmp	.-6      	; 0x6f6 <SM3_Tick+0x1be>
 6fc:	08 95       	ret

000006fe <SM4_Tick>:
//THIS STATE MACHINE CHECKS CONNECTIVITY OF THE BT MODULE
//THE CONTROLLER GOES INTO SEARCH MODE AS SOON AS THE BLUETOOTH CONNECTION IS LOST
//NORMAL FUNCTIONALITY IS RESUMED ONCE CONNECTION IS RE-ESTABLISHED
enum SM4_States{Start4, CHECK_CONNECTIVITY} SM4_State;
void SM4_Tick(){
    switch(SM4_State){
 6fe:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <SM4_State>
 702:	88 23       	and	r24, r24
 704:	19 f0       	breq	.+6      	; 0x70c <SM4_Tick+0xe>
 706:	81 30       	cpi	r24, 0x01	; 1
 708:	39 f0       	breq	.+14     	; 0x718 <SM4_Tick+0x1a>
 70a:	04 c0       	rjmp	.+8      	; 0x714 <SM4_Tick+0x16>
        case Start4:
            SM4_State=CHECK_CONNECTIVITY;
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <SM4_State>
            break;
 712:	02 c0       	rjmp	.+4      	; 0x718 <SM4_Tick+0x1a>
        case CHECK_CONNECTIVITY:
            SM4_State=CHECK_CONNECTIVITY;
            break;
        default: break;  
    }
    switch(SM4_State){
 714:	81 30       	cpi	r24, 0x01	; 1
 716:	41 f4       	brne	.+16     	; 0x728 <SM4_Tick+0x2a>
        case CHECK_CONNECTIVITY:
            if(PINC&0x01)
 718:	30 9b       	sbis	0x06, 0	; 6
 71a:	04 c0       	rjmp	.+8      	; 0x724 <SM4_Tick+0x26>
                RUN_CODE=0x01;
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <RUN_CODE>
 722:	08 95       	ret
            else
                RUN_CODE=0x00;
 724:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <RUN_CODE>
 728:	08 95       	ret

0000072a <main>:
SM3_TICK()-310MS
SM4_TICK()-10MS
*/
int main(void)
{
    DDRB=0xFF;
 72a:	8f ef       	ldi	r24, 0xFF	; 255
 72c:	84 b9       	out	0x04, r24	; 4
    PORTB=0x00;
 72e:	15 b8       	out	0x05, r1	; 5
    DDRC=0x00;
 730:	17 b8       	out	0x07, r1	; 7
    PORTC=0xFF;
 732:	88 b9       	out	0x08, r24	; 8
    DDRD=0xFF;
 734:	8a b9       	out	0x0a, r24	; 10
    PORTD=0x00;
 736:	1b b8       	out	0x0b, r1	; 11
    /* Replace with your application code */
    SM1_State=Start1;
 738:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <SM1_State>
    SM2_State=Start2;
 73c:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <SM2_State>
    SM3_State=Start3;
 740:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <SM3_State>
    SM4_State=Start4;
 744:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <SM4_State>
    TimerSet(10);
 748:	6a e0       	ldi	r22, 0x0A	; 10
 74a:	70 e0       	ldi	r23, 0x00	; 0
 74c:	80 e0       	ldi	r24, 0x00	; 0
    TimerOn();
    LCD_init();
 74e:	90 e0       	ldi	r25, 0x00	; 0
    A2D_init();
 750:	a6 dd       	rcall	.-1204   	; 0x29e <TimerSet>
 752:	46 dd       	rcall	.-1396   	; 0x1e0 <TimerOn>
    initUSART(1);
 754:	e0 dc       	rcall	.-1600   	; 0x116 <LCD_init>
 756:	b4 dd       	rcall	.-1176   	; 0x2c0 <A2D_init>
    ADMUX=0;
 758:	81 e0       	ldi	r24, 0x01	; 1
    unsigned char counter=1;
    LCD_DisplayString(1,"CONNECTING....");
 75a:	0e dd       	rcall	.-1508   	; 0x178 <initUSART>
 75c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 760:	63 e1       	ldi	r22, 0x13	; 19
 762:	71 e0       	ldi	r23, 0x01	; 1
    TimerOn();
    LCD_init();
    A2D_init();
    initUSART(1);
    ADMUX=0;
    unsigned char counter=1;
 764:	81 e0       	ldi	r24, 0x01	; 1
    LCD_DisplayString(1,"CONNECTING....");
    while(1)
    {
        if(counter%30==0){
 766:	ef dc       	rcall	.-1570   	; 0x146 <LCD_DisplayString>
 768:	c1 e0       	ldi	r28, 0x01	; 1
            SM2_Tick();
            counter++;
        }
        else if(counter%31==0)
 76a:	19 e8       	ldi	r17, 0x89	; 137
 76c:	de e1       	ldi	r29, 0x1E	; 30
 76e:	0f 2e       	mov	r0, r31
 770:	f9 e0       	ldi	r31, 0x09	; 9
 772:	ff 2e       	mov	r15, r31
    ADMUX=0;
    unsigned char counter=1;
    LCD_DisplayString(1,"CONNECTING....");
    while(1)
    {
        if(counter%30==0){
 774:	f0 2d       	mov	r31, r0
 776:	0f e1       	ldi	r16, 0x1F	; 31
 778:	c1 9f       	mul	r28, r17
 77a:	81 2d       	mov	r24, r1
 77c:	11 24       	eor	r1, r1
 77e:	82 95       	swap	r24
 780:	8f 70       	andi	r24, 0x0F	; 15
 782:	9c 2f       	mov	r25, r28
 784:	8d 9f       	mul	r24, r29
 786:	90 19       	sub	r25, r0
            SM2_Tick();
 788:	11 24       	eor	r1, r1
 78a:	91 11       	cpse	r25, r1
            counter++;
 78c:	03 c0       	rjmp	.+6      	; 0x794 <main+0x6a>
 78e:	11 de       	rcall	.-990    	; 0x3b2 <SM2_Tick>
        }
        else if(counter%31==0)
 790:	cf 5f       	subi	r28, 0xFF	; 255
 792:	14 c0       	rjmp	.+40     	; 0x7bc <main+0x92>
 794:	cf 9d       	mul	r28, r15
 796:	91 2d       	mov	r25, r1
 798:	11 24       	eor	r1, r1
 79a:	8c 2f       	mov	r24, r28
 79c:	89 1b       	sub	r24, r25
 79e:	86 95       	lsr	r24
 7a0:	89 0f       	add	r24, r25
 7a2:	82 95       	swap	r24
 7a4:	8f 70       	andi	r24, 0x0F	; 15
 7a6:	9c 2f       	mov	r25, r28
        {
            SM3_Tick();
 7a8:	80 9f       	mul	r24, r16
 7aa:	90 19       	sub	r25, r0
            counter=1;
 7ac:	11 24       	eor	r1, r1
 7ae:	91 11       	cpse	r25, r1
        }
        else{
            SM1_Tick();
 7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <main+0x8e>
 7b2:	c2 de       	rcall	.-636    	; 0x538 <SM3_Tick>
            counter++;
 7b4:	c1 e0       	ldi	r28, 0x01	; 1
        }
        SM4_Tick();
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <main+0x92>
 7b8:	89 dd       	rcall	.-1262   	; 0x2cc <SM1_Tick>
        while(!TimerFlag);
 7ba:	cf 5f       	subi	r28, 0xFF	; 255
 7bc:	a0 df       	rcall	.-192    	; 0x6fe <SM4_Tick>
 7be:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <TimerFlag>
        TimerFlag = 0;
 7c2:	88 23       	and	r24, r24
 7c4:	e1 f3       	breq	.-8      	; 0x7be <main+0x94>
    }
 7c6:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <TimerFlag>
 7ca:	d6 cf       	rjmp	.-84     	; 0x778 <main+0x4e>

000007cc <_exit>:
 7cc:	f8 94       	cli

000007ce <__stop_program>:
 7ce:	ff cf       	rjmp	.-2      	; 0x7ce <__stop_program>
