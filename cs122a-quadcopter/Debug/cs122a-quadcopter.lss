
cs122a-quadcopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000042a  000004be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010c  0080010c  000004ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d79  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000900  00000000  00000000  0000134d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005bd  00000000  00000000  00001c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  0000220c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000571  00000000  00000000  00002354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b3  00000000  00000000  000028c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002b78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c4 c0       	rjmp	.+392    	; 0x1be <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	80 d1       	rcall	.+768    	; 0x3c4 <main>
  c4:	b0 c1       	rjmp	.+864    	; 0x426 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
void TimerOff(){
    TCCR1B = 0x00;
}

void TimerISR(){
    TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	58 98       	cbi	0x0b, 0	; 11
  f0:	85 b9       	out	0x05, r24	; 5
  f2:	59 9a       	sbi	0x0b, 1	; 11
  f4:	00 00       	nop
  f6:	59 98       	cbi	0x0b, 1	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	58 9a       	sbi	0x0b, 0	; 11
 136:	85 b9       	out	0x05, r24	; 5
 138:	59 9a       	sbi	0x0b, 1	; 11
 13a:	00 00       	nop
 13c:	59 98       	cbi	0x0b, 1	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerOn>:
 178:	8b e0       	ldi	r24, 0x0B	; 11
 17a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 17e:	8d e7       	ldi	r24, 0x7D	; 125
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 186:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 190:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 194:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1a0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1a4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1a8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <avr_timer_cntcurr>
 1ac:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <avr_timer_cntcurr+0x1>
 1b0:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <avr_timer_cntcurr+0x2>
 1b4:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <avr_timer_cntcurr+0x3>
 1b8:	80 e8       	ldi	r24, 0x80	; 128
 1ba:	8f bf       	out	0x3f, r24	; 63
 1bc:	08 95       	ret

000001be <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
    avr_timer_cntcurr--;
 1d0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <avr_timer_cntcurr>
 1d4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <avr_timer_cntcurr+0x1>
 1d8:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <avr_timer_cntcurr+0x2>
 1dc:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <avr_timer_cntcurr+0x3>
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	a1 09       	sbc	r26, r1
 1e4:	b1 09       	sbc	r27, r1
 1e6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <avr_timer_cntcurr>
 1ea:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <avr_timer_cntcurr+0x1>
 1ee:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <avr_timer_cntcurr+0x2>
 1f2:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <avr_timer_cntcurr+0x3>
    if (avr_timer_cntcurr == 0){
 1f6:	89 2b       	or	r24, r25
 1f8:	8a 2b       	or	r24, r26
 1fa:	8b 2b       	or	r24, r27
 1fc:	99 f4       	brne	.+38     	; 0x224 <__vector_13+0x66>
void TimerOff(){
    TCCR1B = 0x00;
}

void TimerISR(){
    TimerFlag = 1;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <TimerFlag>

ISR(TIMER1_COMPA_vect){
    avr_timer_cntcurr--;
    if (avr_timer_cntcurr == 0){
        TimerISR();
        avr_timer_cntcurr = avr_timer_M;
 204:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 208:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 210:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 214:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <avr_timer_cntcurr>
 218:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <avr_timer_cntcurr+0x1>
 21c:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <avr_timer_cntcurr+0x2>
 220:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <avr_timer_cntcurr+0x3>
        
    }
}
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <TimerSet>:

void TimerSet(unsigned long M){
    avr_timer_M = M;
 236:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 23a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 23e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 242:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    avr_timer_cntcurr = avr_timer_M;
 246:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <avr_timer_cntcurr>
 24a:	70 93 10 01 	sts	0x0110, r23	; 0x800110 <avr_timer_cntcurr+0x1>
 24e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <avr_timer_cntcurr+0x2>
 252:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <avr_timer_cntcurr+0x3>
 256:	08 95       	ret

00000258 <A2D_init>:
    
}


void A2D_init() {
    ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 258:	ea e7       	ldi	r30, 0x7A	; 122
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	80 6e       	ori	r24, 0xE0	; 224
 260:	80 83       	st	Z, r24
 262:	08 95       	ret

00000264 <SM1_Tick>:
enum SM1_States{Start1,read_joystick}SM1_State;
signed char adc_inputs[4];
unsigned char adcmux_state=0;
unsigned short input=0;
void SM1_Tick(){
    switch(SM1_State){
 264:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <SM1_State>
 268:	88 23       	and	r24, r24
 26a:	19 f0       	breq	.+6      	; 0x272 <SM1_Tick+0xe>
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	41 f0       	breq	.+16     	; 0x280 <SM1_Tick+0x1c>
 270:	04 c0       	rjmp	.+8      	; 0x27a <SM1_Tick+0x16>
        case Start1:
            SM1_State=read_joystick;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <SM1_State>
            break;
 278:	03 c0       	rjmp	.+6      	; 0x280 <SM1_Tick+0x1c>
        case read_joystick:
            SM1_State=read_joystick;
            break;
        default:break;
    }
    switch(SM1_State){
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	09 f0       	breq	.+2      	; 0x280 <SM1_Tick+0x1c>
 27e:	58 c0       	rjmp	.+176    	; 0x330 <SM1_Tick+0xcc>
        case read_joystick:
            input=ADC;
 280:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 284:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 288:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 28c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
            if(adcmux_state==3)
 290:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adcmux_state>
 294:	83 30       	cpi	r24, 0x03	; 3
 296:	19 f4       	brne	.+6      	; 0x29e <SM1_Tick+0x3a>
                ADMUX=0;
 298:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 29c:	03 c0       	rjmp	.+6      	; 0x2a4 <SM1_Tick+0x40>
            else
                ADMUX=adcmux_state+1;
 29e:	8f 5f       	subi	r24, 0xFF	; 255
 2a0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
            if(input>550 && input<828)
 2a4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 2a8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 2ac:	9c 01       	movw	r18, r24
 2ae:	27 52       	subi	r18, 0x27	; 39
 2b0:	32 40       	sbci	r19, 0x02	; 2
 2b2:	25 31       	cpi	r18, 0x15	; 21
 2b4:	31 40       	sbci	r19, 0x01	; 1
 2b6:	40 f4       	brcc	.+16     	; 0x2c8 <SM1_Tick+0x64>
                adc_inputs[adcmux_state]=1;
 2b8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <adcmux_state>
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	eb 5e       	subi	r30, 0xEB	; 235
 2c0:	fe 4f       	sbci	r31, 0xFE	; 254
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 83       	st	Z, r24
 2c6:	2a c0       	rjmp	.+84     	; 0x31c <SM1_Tick+0xb8>
            else if(input>828)
 2c8:	8d 33       	cpi	r24, 0x3D	; 61
 2ca:	23 e0       	ldi	r18, 0x03	; 3
 2cc:	92 07       	cpc	r25, r18
 2ce:	40 f0       	brcs	.+16     	; 0x2e0 <SM1_Tick+0x7c>
                adc_inputs[adcmux_state]=2;
 2d0:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <adcmux_state>
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	eb 5e       	subi	r30, 0xEB	; 235
 2d8:	fe 4f       	sbci	r31, 0xFE	; 254
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	80 83       	st	Z, r24
 2de:	1e c0       	rjmp	.+60     	; 0x31c <SM1_Tick+0xb8>
            else if(input<250)
 2e0:	8a 3f       	cpi	r24, 0xFA	; 250
 2e2:	91 05       	cpc	r25, r1
 2e4:	40 f4       	brcc	.+16     	; 0x2f6 <SM1_Tick+0x92>
                adc_inputs[adcmux_state]=-2;
 2e6:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <adcmux_state>
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	eb 5e       	subi	r30, 0xEB	; 235
 2ee:	fe 4f       	sbci	r31, 0xFE	; 254
 2f0:	8e ef       	ldi	r24, 0xFE	; 254
 2f2:	80 83       	st	Z, r24
 2f4:	13 c0       	rjmp	.+38     	; 0x31c <SM1_Tick+0xb8>
            else if(input>250 && input<470)
 2f6:	8b 5f       	subi	r24, 0xFB	; 251
 2f8:	91 09       	sbc	r25, r1
 2fa:	8b 3d       	cpi	r24, 0xDB	; 219
 2fc:	91 05       	cpc	r25, r1
 2fe:	40 f4       	brcc	.+16     	; 0x310 <SM1_Tick+0xac>
                adc_inputs[adcmux_state]=-1;
 300:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <adcmux_state>
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	eb 5e       	subi	r30, 0xEB	; 235
 308:	fe 4f       	sbci	r31, 0xFE	; 254
 30a:	8f ef       	ldi	r24, 0xFF	; 255
 30c:	80 83       	st	Z, r24
 30e:	06 c0       	rjmp	.+12     	; 0x31c <SM1_Tick+0xb8>
            else
                adc_inputs[adcmux_state]=0;
 310:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <adcmux_state>
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	eb 5e       	subi	r30, 0xEB	; 235
 318:	fe 4f       	sbci	r31, 0xFE	; 254
 31a:	10 82       	st	Z, r1
            if(adcmux_state==3)
 31c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adcmux_state>
 320:	83 30       	cpi	r24, 0x03	; 3
 322:	19 f4       	brne	.+6      	; 0x32a <SM1_Tick+0xc6>
                adcmux_state=0;
 324:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <adcmux_state>
 328:	08 95       	ret
            else
                adcmux_state+=1;
 32a:	8f 5f       	subi	r24, 0xFF	; 255
 32c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <adcmux_state>
 330:	08 95       	ret

00000332 <SM2_Tick>:
    }
}

enum SM2_States{Start2,led_display}SM2_State;
void SM2_Tick(){
    switch(SM2_State){
 332:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <SM2_State>
 336:	88 23       	and	r24, r24
 338:	19 f0       	breq	.+6      	; 0x340 <SM2_Tick+0xe>
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	41 f0       	breq	.+16     	; 0x34e <SM2_Tick+0x1c>
 33e:	04 c0       	rjmp	.+8      	; 0x348 <SM2_Tick+0x16>
        case Start2:
            SM2_State=led_display;
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <SM2_State>
            break;
 346:	03 c0       	rjmp	.+6      	; 0x34e <SM2_Tick+0x1c>
        case led_display:
            SM2_State=led_display;
            break;
        default:break;
    }
    switch(SM2_State){
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	09 f0       	breq	.+2      	; 0x34e <SM2_Tick+0x1c>
 34c:	3a c0       	rjmp	.+116    	; 0x3c2 <SM2_Tick+0x90>
        case led_display:
            LCD_Cursor(1);
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	da de       	rcall	.-588    	; 0x106 <LCD_Cursor>
            LCD_WriteData(48+abs(adc_inputs[0]));
 352:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <adc_inputs>
 356:	08 2e       	mov	r0, r24
 358:	00 0c       	add	r0, r0
 35a:	99 0b       	sbc	r25, r25
 35c:	99 23       	and	r25, r25
 35e:	1c f4       	brge	.+6      	; 0x366 <SM2_Tick+0x34>
 360:	91 95       	neg	r25
 362:	81 95       	neg	r24
 364:	91 09       	sbc	r25, r1
 366:	80 5d       	subi	r24, 0xD0	; 208
            LCD_Cursor(3);
 368:	e5 de       	rcall	.-566    	; 0x134 <LCD_WriteData>
 36a:	83 e0       	ldi	r24, 0x03	; 3
 36c:	cc de       	rcall	.-616    	; 0x106 <LCD_Cursor>
            LCD_WriteData(48+abs(adc_inputs[1]));
 36e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <adc_inputs+0x1>
 372:	08 2e       	mov	r0, r24
 374:	00 0c       	add	r0, r0
 376:	99 0b       	sbc	r25, r25
 378:	99 23       	and	r25, r25
 37a:	1c f4       	brge	.+6      	; 0x382 <SM2_Tick+0x50>
 37c:	91 95       	neg	r25
 37e:	81 95       	neg	r24
 380:	91 09       	sbc	r25, r1
 382:	80 5d       	subi	r24, 0xD0	; 208
            LCD_Cursor(5);
 384:	d7 de       	rcall	.-594    	; 0x134 <LCD_WriteData>
 386:	85 e0       	ldi	r24, 0x05	; 5
 388:	be de       	rcall	.-644    	; 0x106 <LCD_Cursor>
            LCD_WriteData(48+abs(adc_inputs[2]));
 38a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <adc_inputs+0x2>
 38e:	08 2e       	mov	r0, r24
 390:	00 0c       	add	r0, r0
 392:	99 0b       	sbc	r25, r25
 394:	99 23       	and	r25, r25
 396:	1c f4       	brge	.+6      	; 0x39e <SM2_Tick+0x6c>
 398:	91 95       	neg	r25
 39a:	81 95       	neg	r24
 39c:	91 09       	sbc	r25, r1
 39e:	80 5d       	subi	r24, 0xD0	; 208
            LCD_Cursor(7);
 3a0:	c9 de       	rcall	.-622    	; 0x134 <LCD_WriteData>
 3a2:	87 e0       	ldi	r24, 0x07	; 7
 3a4:	b0 de       	rcall	.-672    	; 0x106 <LCD_Cursor>
            LCD_WriteData(48+abs(adc_inputs[3]));
 3a6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <adc_inputs+0x3>
 3aa:	08 2e       	mov	r0, r24
 3ac:	00 0c       	add	r0, r0
 3ae:	99 0b       	sbc	r25, r25
 3b0:	99 23       	and	r25, r25
 3b2:	1c f4       	brge	.+6      	; 0x3ba <SM2_Tick+0x88>
 3b4:	91 95       	neg	r25
 3b6:	81 95       	neg	r24
 3b8:	91 09       	sbc	r25, r1
 3ba:	80 5d       	subi	r24, 0xD0	; 208
            LCD_Cursor(31);
 3bc:	bb de       	rcall	.-650    	; 0x134 <LCD_WriteData>
 3be:	8f e1       	ldi	r24, 0x1F	; 31
 3c0:	a2 ce       	rjmp	.-700    	; 0x106 <LCD_Cursor>
 3c2:	08 95       	ret

000003c4 <main>:
        default:break;
    }
}    
int main(void)
{
    DDRB=0xFF;
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	84 b9       	out	0x04, r24	; 4
    PORTB=0x00;
 3c8:	15 b8       	out	0x05, r1	; 5
    DDRD=0xFF;
 3ca:	8a b9       	out	0x0a, r24	; 10
    PORTD=0x00;
 3cc:	1b b8       	out	0x0b, r1	; 11
    /* Replace with your application code */
    SM1_State=Start1;
 3ce:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <SM1_State>
    SM2_State=Start2;
 3d2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <SM2_State>
    TimerSet(10);
 3d6:	6a e0       	ldi	r22, 0x0A	; 10
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	80 e0       	ldi	r24, 0x00	; 0
    TimerOn();
    LCD_init();
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	2b df       	rcall	.-426    	; 0x236 <TimerSet>
    A2D_init();
 3e0:	cb de       	rcall	.-618    	; 0x178 <TimerOn>
 3e2:	99 de       	rcall	.-718    	; 0x116 <LCD_init>
    ADMUX=0;
 3e4:	39 df       	rcall	.-398    	; 0x258 <A2D_init>
    unsigned char counter=1; 
    LCD_DisplayString(1,"0 0 0 0");
 3e6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 3ea:	64 e0       	ldi	r22, 0x04	; 4
 3ec:	71 e0       	ldi	r23, 0x01	; 1
    TimerSet(10);
    TimerOn();
    LCD_init();
    A2D_init();
    ADMUX=0;
    unsigned char counter=1; 
 3ee:	81 e0       	ldi	r24, 0x01	; 1
    LCD_DisplayString(1,"0 0 0 0");
    while(1)
    {
    //LCD_DisplayString(1,"Hello World!");    //LCD SCREEN CHECK
        SM1_Tick();
        if(counter%30==0){
 3f0:	aa de       	rcall	.-684    	; 0x146 <LCD_DisplayString>
 3f2:	c1 e0       	ldi	r28, 0x01	; 1
    unsigned char counter=1; 
    LCD_DisplayString(1,"0 0 0 0");
    while(1)
    {
    //LCD_DisplayString(1,"Hello World!");    //LCD SCREEN CHECK
        SM1_Tick();
 3f4:	19 e8       	ldi	r17, 0x89	; 137
 3f6:	de e1       	ldi	r29, 0x1E	; 30
        if(counter%30==0){
 3f8:	35 df       	rcall	.-406    	; 0x264 <SM1_Tick>
 3fa:	c1 9f       	mul	r28, r17
 3fc:	81 2d       	mov	r24, r1
 3fe:	11 24       	eor	r1, r1
 400:	82 95       	swap	r24
 402:	8f 70       	andi	r24, 0x0F	; 15
 404:	9c 2f       	mov	r25, r28
 406:	8d 9f       	mul	r24, r29
 408:	90 19       	sub	r25, r0
 40a:	11 24       	eor	r1, r1
            SM2_Tick();
 40c:	91 11       	cpse	r25, r1
 40e:	03 c0       	rjmp	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
            counter=1;
 410:	90 df       	rcall	.-224    	; 0x332 <SM2_Tick>
 412:	c1 e0       	ldi	r28, 0x01	; 1
        }
        else{
            counter++;
 414:	01 c0       	rjmp	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
        }                               
        while(!TimerFlag);
 416:	cf 5f       	subi	r28, 0xFF	; 255
 418:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <TimerFlag>
 41c:	88 23       	and	r24, r24
        TimerFlag = 0;
 41e:	e1 f3       	breq	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 420:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <TimerFlag>
 424:	e9 cf       	rjmp	.-46     	; 0x3f8 <main+0x34>

00000426 <_exit>:
 426:	f8 94       	cli

00000428 <__stop_program>:
 428:	ff cf       	rjmp	.-2      	; 0x428 <__stop_program>
