
cs122a-quadcopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000065c  000006f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000065c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080010c  0080010c  000006fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001158  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099a  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ac  00000000  00000000  0000233e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00002bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000684  00000000  00000000  00002ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a9  00000000  00000000  00003460  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003909  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	27 c1       	rjmp	.+590    	; 0x284 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e5       	ldi	r30, 0x5C	; 92
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 32       	cpi	r26, 0x22	; 34
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8d d2       	rcall	.+1306   	; 0x5de <main>
  c4:	c9 c2       	rjmp	.+1426   	; 0x658 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
void TimerOff(){
    TCCR1B = 0x00;
}

void TimerISR(){
    TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	58 98       	cbi	0x0b, 0	; 11
  f0:	85 b9       	out	0x05, r24	; 5
  f2:	59 9a       	sbi	0x0b, 1	; 11
  f4:	00 00       	nop
  f6:	59 98       	cbi	0x0b, 1	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	58 9a       	sbi	0x0b, 0	; 11
 136:	85 b9       	out	0x05, r24	; 5
 138:	59 9a       	sbi	0x0b, 1	; 11
 13a:	00 00       	nop
 13c:	59 98       	cbi	0x0b, 1	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <initUSART>:
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	81 f0       	breq	.+32     	; 0x19c <initUSART+0x24>
 17c:	e1 ec       	ldi	r30, 0xC1	; 193
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	88 61       	ori	r24, 0x18	; 24
 184:	80 83       	st	Z, r24
 186:	e2 ec       	ldi	r30, 0xC2	; 194
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	86 60       	ori	r24, 0x06	; 6
 18e:	80 83       	st	Z, r24
 190:	83 e3       	ldi	r24, 0x33	; 51
 192:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 196:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 19a:	08 95       	ret
 19c:	e9 ec       	ldi	r30, 0xC9	; 201
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	88 61       	ori	r24, 0x18	; 24
 1a4:	80 83       	st	Z, r24
 1a6:	ea ec       	ldi	r30, 0xCA	; 202
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	86 60       	ori	r24, 0x06	; 6
 1ae:	80 83       	st	Z, r24
 1b0:	83 e3       	ldi	r24, 0x33	; 51
 1b2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 1b6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1ba:	08 95       	ret

000001bc <USART_Flush>:
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	29 f4       	brne	.+10     	; 0x1ca <USART_Flush+0xe>
 1c0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 1c4:	88 23       	and	r24, r24
 1c6:	74 f0       	brlt	.+28     	; 0x1e4 <USART_Flush+0x28>
 1c8:	08 95       	ret
 1ca:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 1ce:	88 23       	and	r24, r24
 1d0:	8c f4       	brge	.+34     	; 0x1f4 <USART_Flush+0x38>
 1d2:	a6 ec       	ldi	r26, 0xC6	; 198
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	e0 ec       	ldi	r30, 0xC0	; 192
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	8c 91       	ld	r24, X
 1dc:	80 81       	ld	r24, Z
 1de:	88 23       	and	r24, r24
 1e0:	e4 f3       	brlt	.-8      	; 0x1da <USART_Flush+0x1e>
 1e2:	08 95       	ret
 1e4:	ae ec       	ldi	r26, 0xCE	; 206
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	e8 ec       	ldi	r30, 0xC8	; 200
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	8c 91       	ld	r24, X
 1ee:	80 81       	ld	r24, Z
 1f0:	88 23       	and	r24, r24
 1f2:	e4 f3       	brlt	.-8      	; 0x1ec <USART_Flush+0x30>
 1f4:	08 95       	ret

000001f6 <USART_Send>:
 1f6:	61 30       	cpi	r22, 0x01	; 1
 1f8:	41 f0       	breq	.+16     	; 0x20a <USART_Send+0x14>
 1fa:	e0 ec       	ldi	r30, 0xC0	; 192
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	90 81       	ld	r25, Z
 200:	95 ff       	sbrs	r25, 5
 202:	fd cf       	rjmp	.-6      	; 0x1fe <USART_Send+0x8>
 204:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 208:	08 95       	ret
 20a:	e8 ec       	ldi	r30, 0xC8	; 200
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	90 81       	ld	r25, Z
 210:	95 ff       	sbrs	r25, 5
 212:	fd cf       	rjmp	.-6      	; 0x20e <USART_Send+0x18>
 214:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 218:	08 95       	ret

0000021a <USART_Receive>:
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	41 f0       	breq	.+16     	; 0x22e <USART_Receive+0x14>
 21e:	e0 ec       	ldi	r30, 0xC0	; 192
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	88 23       	and	r24, r24
 226:	ec f7       	brge	.-6      	; 0x222 <USART_Receive+0x8>
 228:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 22c:	08 95       	ret
 22e:	e8 ec       	ldi	r30, 0xC8	; 200
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	88 23       	and	r24, r24
 236:	ec f7       	brge	.-6      	; 0x232 <USART_Receive+0x18>
 238:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 23c:	08 95       	ret

0000023e <TimerOn>:
 23e:	8b e0       	ldi	r24, 0x0B	; 11
 240:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 244:	8d e7       	ldi	r24, 0x7D	; 125
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 24c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 256:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 25a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 25e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 262:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 266:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 26a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 26e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <avr_timer_cntcurr>
 272:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <avr_timer_cntcurr+0x1>
 276:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <avr_timer_cntcurr+0x2>
 27a:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <avr_timer_cntcurr+0x3>
 27e:	80 e8       	ldi	r24, 0x80	; 128
 280:	8f bf       	out	0x3f, r24	; 63
 282:	08 95       	ret

00000284 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
    avr_timer_cntcurr--;
 296:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <avr_timer_cntcurr>
 29a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <avr_timer_cntcurr+0x1>
 29e:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <avr_timer_cntcurr+0x2>
 2a2:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <avr_timer_cntcurr+0x3>
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	a1 09       	sbc	r26, r1
 2aa:	b1 09       	sbc	r27, r1
 2ac:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <avr_timer_cntcurr>
 2b0:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <avr_timer_cntcurr+0x1>
 2b4:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <avr_timer_cntcurr+0x2>
 2b8:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <avr_timer_cntcurr+0x3>
    if (avr_timer_cntcurr == 0){
 2bc:	89 2b       	or	r24, r25
 2be:	8a 2b       	or	r24, r26
 2c0:	8b 2b       	or	r24, r27
 2c2:	99 f4       	brne	.+38     	; 0x2ea <__vector_13+0x66>
void TimerOff(){
    TCCR1B = 0x00;
}

void TimerISR(){
    TimerFlag = 1;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <TimerFlag>

ISR(TIMER1_COMPA_vect){
    avr_timer_cntcurr--;
    if (avr_timer_cntcurr == 0){
        TimerISR();
        avr_timer_cntcurr = avr_timer_M;
 2ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2d2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2d6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2da:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <avr_timer_cntcurr>
 2de:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <avr_timer_cntcurr+0x1>
 2e2:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <avr_timer_cntcurr+0x2>
 2e6:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <avr_timer_cntcurr+0x3>
        
    }
}
 2ea:	bf 91       	pop	r27
 2ec:	af 91       	pop	r26
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <TimerSet>:

void TimerSet(unsigned long M){
    avr_timer_M = M;
 2fc:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 300:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 304:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 308:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    avr_timer_cntcurr = avr_timer_M;
 30c:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <avr_timer_cntcurr>
 310:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <avr_timer_cntcurr+0x1>
 314:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <avr_timer_cntcurr+0x2>
 318:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <avr_timer_cntcurr+0x3>
 31c:	08 95       	ret

0000031e <A2D_init>:
    
}


void A2D_init() {
    ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 31e:	ea e7       	ldi	r30, 0x7A	; 122
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	80 6e       	ori	r24, 0xE0	; 224
 326:	80 83       	st	Z, r24
 328:	08 95       	ret

0000032a <SM1_Tick>:
enum SM1_States{Start1,read_joystick}SM1_State;
signed char adc_inputs[4];
unsigned char adcmux_state=0;
unsigned short input=0;
void SM1_Tick(){
    switch(SM1_State){
 32a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <SM1_State>
 32e:	88 23       	and	r24, r24
 330:	19 f0       	breq	.+6      	; 0x338 <SM1_Tick+0xe>
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	41 f0       	breq	.+16     	; 0x346 <SM1_Tick+0x1c>
 336:	04 c0       	rjmp	.+8      	; 0x340 <SM1_Tick+0x16>
        case Start1:
        SM1_State=read_joystick;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <SM1_State>
        break;
 33e:	03 c0       	rjmp	.+6      	; 0x346 <SM1_Tick+0x1c>
        case read_joystick:
        SM1_State=read_joystick;
        break;
        default:break;
    }
    switch(SM1_State){
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	09 f0       	breq	.+2      	; 0x346 <SM1_Tick+0x1c>
 344:	58 c0       	rjmp	.+176    	; 0x3f6 <SM1_Tick+0xcc>
        case read_joystick:
        input=ADC;
 346:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 34a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 34e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <input+0x1>
 352:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <input>
        if(adcmux_state==3)
 356:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <adcmux_state>
 35a:	83 30       	cpi	r24, 0x03	; 3
 35c:	19 f4       	brne	.+6      	; 0x364 <SM1_Tick+0x3a>
        ADMUX=0;
 35e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 362:	03 c0       	rjmp	.+6      	; 0x36a <SM1_Tick+0x40>
        else
        ADMUX=adcmux_state+1;
 364:	8f 5f       	subi	r24, 0xFF	; 255
 366:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
        if(input>550 && input<828)
 36a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <input>
 36e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <input+0x1>
 372:	9c 01       	movw	r18, r24
 374:	27 52       	subi	r18, 0x27	; 39
 376:	32 40       	sbci	r19, 0x02	; 2
 378:	25 31       	cpi	r18, 0x15	; 21
 37a:	31 40       	sbci	r19, 0x01	; 1
 37c:	40 f4       	brcc	.+16     	; 0x38e <SM1_Tick+0x64>
        adc_inputs[adcmux_state]=1;
 37e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <adcmux_state>
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	e7 5e       	subi	r30, 0xE7	; 231
 386:	fe 4f       	sbci	r31, 0xFE	; 254
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	80 83       	st	Z, r24
 38c:	2a c0       	rjmp	.+84     	; 0x3e2 <SM1_Tick+0xb8>
        else if(input>828)
 38e:	8d 33       	cpi	r24, 0x3D	; 61
 390:	23 e0       	ldi	r18, 0x03	; 3
 392:	92 07       	cpc	r25, r18
 394:	40 f0       	brcs	.+16     	; 0x3a6 <SM1_Tick+0x7c>
        adc_inputs[adcmux_state]=2;
 396:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <adcmux_state>
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	e7 5e       	subi	r30, 0xE7	; 231
 39e:	fe 4f       	sbci	r31, 0xFE	; 254
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	80 83       	st	Z, r24
 3a4:	1e c0       	rjmp	.+60     	; 0x3e2 <SM1_Tick+0xb8>
        else if(input<250)
 3a6:	8a 3f       	cpi	r24, 0xFA	; 250
 3a8:	91 05       	cpc	r25, r1
 3aa:	40 f4       	brcc	.+16     	; 0x3bc <SM1_Tick+0x92>
        adc_inputs[adcmux_state]=-2;
 3ac:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <adcmux_state>
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	e7 5e       	subi	r30, 0xE7	; 231
 3b4:	fe 4f       	sbci	r31, 0xFE	; 254
 3b6:	8e ef       	ldi	r24, 0xFE	; 254
 3b8:	80 83       	st	Z, r24
 3ba:	13 c0       	rjmp	.+38     	; 0x3e2 <SM1_Tick+0xb8>
        else if(input>250 && input<470)
 3bc:	8b 5f       	subi	r24, 0xFB	; 251
 3be:	91 09       	sbc	r25, r1
 3c0:	8b 3d       	cpi	r24, 0xDB	; 219
 3c2:	91 05       	cpc	r25, r1
 3c4:	40 f4       	brcc	.+16     	; 0x3d6 <SM1_Tick+0xac>
        adc_inputs[adcmux_state]=-1;
 3c6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <adcmux_state>
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	e7 5e       	subi	r30, 0xE7	; 231
 3ce:	fe 4f       	sbci	r31, 0xFE	; 254
 3d0:	8f ef       	ldi	r24, 0xFF	; 255
 3d2:	80 83       	st	Z, r24
 3d4:	06 c0       	rjmp	.+12     	; 0x3e2 <SM1_Tick+0xb8>
        else
        adc_inputs[adcmux_state]=0;
 3d6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <adcmux_state>
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	e7 5e       	subi	r30, 0xE7	; 231
 3de:	fe 4f       	sbci	r31, 0xFE	; 254
 3e0:	10 82       	st	Z, r1
        if(adcmux_state==3)
 3e2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <adcmux_state>
 3e6:	83 30       	cpi	r24, 0x03	; 3
 3e8:	19 f4       	brne	.+6      	; 0x3f0 <SM1_Tick+0xc6>
        adcmux_state=0;
 3ea:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <adcmux_state>
 3ee:	08 95       	ret
        else
        adcmux_state+=1;
 3f0:	8f 5f       	subi	r24, 0xFF	; 255
 3f2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <adcmux_state>
 3f6:	08 95       	ret

000003f8 <SM2_Tick>:



enum SM2_States{Start2,led_display}SM2_State;
void SM2_Tick(){
    switch(SM2_State){
 3f8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <SM2_State>
 3fc:	88 23       	and	r24, r24
 3fe:	19 f0       	breq	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	41 f0       	breq	.+16     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 404:	04 c0       	rjmp	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
        case Start2:
        SM2_State=led_display;
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <SM2_State>
        break;
 40c:	03 c0       	rjmp	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
        case led_display:
        SM2_State=led_display;
        break;
        default:break;
    }
    switch(SM2_State){
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	09 f0       	breq	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	3a c0       	rjmp	.+116    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
        case led_display:
        LCD_Cursor(1);
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	77 de       	rcall	.-786    	; 0x106 <LCD_Cursor>
        LCD_WriteData(48+abs(adc_inputs[0]));
 418:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <adc_inputs>
 41c:	08 2e       	mov	r0, r24
 41e:	00 0c       	add	r0, r0
 420:	99 0b       	sbc	r25, r25
 422:	99 23       	and	r25, r25
 424:	1c f4       	brge	.+6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 426:	91 95       	neg	r25
 428:	81 95       	neg	r24
 42a:	91 09       	sbc	r25, r1
 42c:	80 5d       	subi	r24, 0xD0	; 208
        LCD_Cursor(3);
 42e:	82 de       	rcall	.-764    	; 0x134 <LCD_WriteData>
 430:	83 e0       	ldi	r24, 0x03	; 3
 432:	69 de       	rcall	.-814    	; 0x106 <LCD_Cursor>
        LCD_WriteData(48+abs(adc_inputs[1]));
 434:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <adc_inputs+0x1>
 438:	08 2e       	mov	r0, r24
 43a:	00 0c       	add	r0, r0
 43c:	99 0b       	sbc	r25, r25
 43e:	99 23       	and	r25, r25
 440:	1c f4       	brge	.+6      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 442:	91 95       	neg	r25
 444:	81 95       	neg	r24
 446:	91 09       	sbc	r25, r1
 448:	80 5d       	subi	r24, 0xD0	; 208
        LCD_Cursor(5);
 44a:	74 de       	rcall	.-792    	; 0x134 <LCD_WriteData>
 44c:	85 e0       	ldi	r24, 0x05	; 5
 44e:	5b de       	rcall	.-842    	; 0x106 <LCD_Cursor>
        LCD_WriteData(48+abs(adc_inputs[2]));
 450:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <adc_inputs+0x2>
 454:	08 2e       	mov	r0, r24
 456:	00 0c       	add	r0, r0
 458:	99 0b       	sbc	r25, r25
 45a:	99 23       	and	r25, r25
 45c:	1c f4       	brge	.+6      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 45e:	91 95       	neg	r25
 460:	81 95       	neg	r24
 462:	91 09       	sbc	r25, r1
 464:	80 5d       	subi	r24, 0xD0	; 208
        LCD_Cursor(7);
 466:	66 de       	rcall	.-820    	; 0x134 <LCD_WriteData>
 468:	87 e0       	ldi	r24, 0x07	; 7
 46a:	4d de       	rcall	.-870    	; 0x106 <LCD_Cursor>
        LCD_WriteData(48+abs(adc_inputs[3]));
 46c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <adc_inputs+0x3>
 470:	08 2e       	mov	r0, r24
 472:	00 0c       	add	r0, r0
 474:	99 0b       	sbc	r25, r25
 476:	99 23       	and	r25, r25
 478:	1c f4       	brge	.+6      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 47a:	91 95       	neg	r25
 47c:	81 95       	neg	r24
 47e:	91 09       	sbc	r25, r1
 480:	80 5d       	subi	r24, 0xD0	; 208
        LCD_Cursor(31);
 482:	58 de       	rcall	.-848    	; 0x134 <LCD_WriteData>
 484:	8f e1       	ldi	r24, 0x1F	; 31
 486:	3f ce       	rjmp	.-898    	; 0x106 <LCD_Cursor>
 488:	08 95       	ret

0000048a <SM3_Tick>:

unsigned char joystick_transmit[4];
unsigned char usart_send=0;
unsigned char usart_receive=0;
enum SM3_States{Start3,usart_send_receive}SM3_State;
void SM3_Tick(){
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
    switch(SM3_State){
 48e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <SM3_State>
 492:	88 23       	and	r24, r24
 494:	19 f0       	breq	.+6      	; 0x49c <SM3_Tick+0x12>
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	41 f0       	breq	.+16     	; 0x4aa <SM3_Tick+0x20>
 49a:	04 c0       	rjmp	.+8      	; 0x4a4 <SM3_Tick+0x1a>
        case Start3:
        SM3_State=usart_send_receive;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <SM3_State>
        break;
 4a2:	03 c0       	rjmp	.+6      	; 0x4aa <SM3_Tick+0x20>
        case usart_send_receive:
        SM3_State=usart_send_receive;
        break;
        default:break;
    }
    switch(SM3_State){
 4a4:	81 30       	cpi	r24, 0x01	; 1
 4a6:	09 f0       	breq	.+2      	; 0x4aa <SM3_Tick+0x20>
 4a8:	6d c0       	rjmp	.+218    	; 0x584 <SM3_Tick+0xfa>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 4aa:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
        case usart_send_receive:
        if(USART_IsSendReady(1))
 4ae:	85 ff       	sbrs	r24, 5
 4b0:	4a c0       	rjmp	.+148    	; 0x546 <SM3_Tick+0xbc>
        {
            usart_send=0;
            usart_send=usart_send|(0x03&(abs(adc_inputs[0])));
            usart_send=usart_send|(0x0C&(abs(adc_inputs[1])<<2));
            usart_send=usart_send|(0x30&(abs(adc_inputs[2])<<4));
            usart_send=usart_send|(0xC0&(abs(adc_inputs[3])<<6));
 4b2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <adc_inputs>
 4b6:	08 2e       	mov	r0, r24
 4b8:	00 0c       	add	r0, r0
 4ba:	99 0b       	sbc	r25, r25
 4bc:	99 23       	and	r25, r25
 4be:	1c f4       	brge	.+6      	; 0x4c6 <SM3_Tick+0x3c>
 4c0:	91 95       	neg	r25
 4c2:	81 95       	neg	r24
 4c4:	91 09       	sbc	r25, r1
 4c6:	83 70       	andi	r24, 0x03	; 3
 4c8:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <adc_inputs+0x3>
 4cc:	69 2f       	mov	r22, r25
 4ce:	99 0f       	add	r25, r25
 4d0:	77 0b       	sbc	r23, r23
 4d2:	77 23       	and	r23, r23
 4d4:	1c f4       	brge	.+6      	; 0x4dc <SM3_Tick+0x52>
 4d6:	71 95       	neg	r23
 4d8:	61 95       	neg	r22
 4da:	71 09       	sbc	r23, r1
 4dc:	00 24       	eor	r0, r0
 4de:	76 95       	lsr	r23
 4e0:	67 95       	ror	r22
 4e2:	07 94       	ror	r0
 4e4:	76 95       	lsr	r23
 4e6:	67 95       	ror	r22
 4e8:	07 94       	ror	r0
 4ea:	76 2f       	mov	r23, r22
 4ec:	60 2d       	mov	r22, r0
 4ee:	86 2b       	or	r24, r22
 4f0:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <adc_inputs+0x1>
 4f4:	04 2e       	mov	r0, r20
 4f6:	00 0c       	add	r0, r0
 4f8:	55 0b       	sbc	r21, r21
 4fa:	55 23       	and	r21, r21
 4fc:	1c f4       	brge	.+6      	; 0x504 <SM3_Tick+0x7a>
 4fe:	51 95       	neg	r21
 500:	41 95       	neg	r20
 502:	51 09       	sbc	r21, r1
 504:	44 0f       	add	r20, r20
 506:	55 1f       	adc	r21, r21
 508:	44 0f       	add	r20, r20
 50a:	55 1f       	adc	r21, r21
 50c:	4c 70       	andi	r20, 0x0C	; 12
 50e:	84 2b       	or	r24, r20
 510:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <adc_inputs+0x2>
 514:	02 2e       	mov	r0, r18
 516:	00 0c       	add	r0, r0
 518:	33 0b       	sbc	r19, r19
 51a:	33 23       	and	r19, r19
 51c:	1c f4       	brge	.+6      	; 0x524 <SM3_Tick+0x9a>
 51e:	31 95       	neg	r19
 520:	21 95       	neg	r18
 522:	31 09       	sbc	r19, r1
 524:	22 95       	swap	r18
 526:	32 95       	swap	r19
 528:	30 7f       	andi	r19, 0xF0	; 240
 52a:	32 27       	eor	r19, r18
 52c:	20 7f       	andi	r18, 0xF0	; 240
 52e:	32 27       	eor	r19, r18
 530:	20 73       	andi	r18, 0x30	; 48
 532:	82 2b       	or	r24, r18
 534:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <usart_send>
            USART_Send(usart_send,1);
 538:	61 e0       	ldi	r22, 0x01	; 1
 53a:	5d de       	rcall	.-838    	; 0x1f6 <USART_Send>
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 53c:	e8 ec       	ldi	r30, 0xC8	; 200
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	80 81       	ld	r24, Z
            while(!USART_HasTransmitted(1));
 542:	86 ff       	sbrs	r24, 6
 544:	fd cf       	rjmp	.-6      	; 0x540 <SM3_Tick+0xb6>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 546:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
        }
        if(USART_HasReceived(1))
 54a:	88 23       	and	r24, r24
 54c:	dc f4       	brge	.+54     	; 0x584 <SM3_Tick+0xfa>
        {
            joystick_transmit[0]=0;
 54e:	ce e1       	ldi	r28, 0x1E	; 30
 550:	d1 e0       	ldi	r29, 0x01	; 1
            usart_receive=USART_Receive(1);
 552:	18 82       	st	Y, r1
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	61 de       	rcall	.-830    	; 0x21a <USART_Receive>
 558:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
            joystick_transmit[0]=usart_receive&0x03;
 55c:	98 2f       	mov	r25, r24
 55e:	93 70       	andi	r25, 0x03	; 3
            joystick_transmit[1]=(usart_receive>>2)&0x03;
 560:	98 83       	st	Y, r25
 562:	98 2f       	mov	r25, r24
 564:	96 95       	lsr	r25
 566:	96 95       	lsr	r25
 568:	93 70       	andi	r25, 0x03	; 3
            joystick_transmit[2]=(usart_receive>>4)&0x03;
 56a:	99 83       	std	Y+1, r25	; 0x01
 56c:	98 2f       	mov	r25, r24
 56e:	92 95       	swap	r25
 570:	9f 70       	andi	r25, 0x0F	; 15
 572:	93 70       	andi	r25, 0x03	; 3
            joystick_transmit[3]=(usart_receive>>6)&0x03;
 574:	9a 83       	std	Y+2, r25	; 0x02
 576:	82 95       	swap	r24
 578:	86 95       	lsr	r24
 57a:	86 95       	lsr	r24
            USART_Flush(1);
 57c:	83 70       	andi	r24, 0x03	; 3
 57e:	8b 83       	std	Y+3, r24	; 0x03
 580:	81 e0       	ldi	r24, 0x01	; 1
        }
        
        break;
        default:break;
    }
}
 582:	1c de       	rcall	.-968    	; 0x1bc <USART_Flush>
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	08 95       	ret

0000058a <SM4_Tick>:
enum SM4_States{Start4,lcd_display2}SM4_State;
void SM4_Tick(){
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
    switch(SM4_State){
 58e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <SM4_State>
 592:	88 23       	and	r24, r24
 594:	19 f0       	breq	.+6      	; 0x59c <SM4_Tick+0x12>
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	39 f0       	breq	.+14     	; 0x5a8 <SM4_Tick+0x1e>
 59a:	04 c0       	rjmp	.+8      	; 0x5a4 <SM4_Tick+0x1a>
        case Start4:
        SM4_State=lcd_display2;
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <SM4_State>
        break;
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <SM4_Tick+0x1e>
        case lcd_display2:
        SM4_State=lcd_display2;
        break;
        default:break;
    }
    switch(SM4_State){
 5a4:	81 30       	cpi	r24, 0x01	; 1
 5a6:	c1 f4       	brne	.+48     	; 0x5d8 <SM4_Tick+0x4e>
        case lcd_display2:
        LCD_Cursor(17);
 5a8:	81 e1       	ldi	r24, 0x11	; 17
 5aa:	ad dd       	rcall	.-1190   	; 0x106 <LCD_Cursor>
        LCD_WriteData(48+abs(joystick_transmit[0]));
 5ac:	ce e1       	ldi	r28, 0x1E	; 30
 5ae:	d1 e0       	ldi	r29, 0x01	; 1
 5b0:	88 81       	ld	r24, Y
 5b2:	80 5d       	subi	r24, 0xD0	; 208
        LCD_Cursor(19);
 5b4:	bf dd       	rcall	.-1154   	; 0x134 <LCD_WriteData>
 5b6:	83 e1       	ldi	r24, 0x13	; 19
        LCD_WriteData(48+abs(joystick_transmit[1]));
 5b8:	a6 dd       	rcall	.-1204   	; 0x106 <LCD_Cursor>
 5ba:	89 81       	ldd	r24, Y+1	; 0x01
        LCD_Cursor(21);
 5bc:	80 5d       	subi	r24, 0xD0	; 208
        LCD_WriteData(48+abs(joystick_transmit[2]));
 5be:	ba dd       	rcall	.-1164   	; 0x134 <LCD_WriteData>
 5c0:	85 e1       	ldi	r24, 0x15	; 21
        LCD_Cursor(23);
 5c2:	a1 dd       	rcall	.-1214   	; 0x106 <LCD_Cursor>
 5c4:	8a 81       	ldd	r24, Y+2	; 0x02
        LCD_WriteData(48+abs(joystick_transmit[3]));
 5c6:	80 5d       	subi	r24, 0xD0	; 208
 5c8:	b5 dd       	rcall	.-1174   	; 0x134 <LCD_WriteData>
 5ca:	87 e1       	ldi	r24, 0x17	; 23
 5cc:	9c dd       	rcall	.-1224   	; 0x106 <LCD_Cursor>
        LCD_Cursor(31);
 5ce:	8b 81       	ldd	r24, Y+3	; 0x03
 5d0:	80 5d       	subi	r24, 0xD0	; 208
 5d2:	b0 dd       	rcall	.-1184   	; 0x134 <LCD_WriteData>
        break;
    }
}
 5d4:	8f e1       	ldi	r24, 0x1F	; 31
 5d6:	97 dd       	rcall	.-1234   	; 0x106 <LCD_Cursor>
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	08 95       	ret

000005de <main>:
int main(void)
{
    DDRB=0xFF;
 5de:	8f ef       	ldi	r24, 0xFF	; 255
 5e0:	84 b9       	out	0x04, r24	; 4
    PORTB=0x00;
 5e2:	15 b8       	out	0x05, r1	; 5
    DDRD=0xFF;
 5e4:	8a b9       	out	0x0a, r24	; 10
    PORTD=0x00;
 5e6:	1b b8       	out	0x0b, r1	; 11
    /* Replace with your application code */
    SM1_State=Start1;
 5e8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <SM1_State>
    SM2_State=Start2;
 5ec:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <SM2_State>
    SM3_State=Start3;
 5f0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <SM3_State>
    SM4_State=Start4;
 5f4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <SM4_State>
    TimerSet(10);
 5f8:	6a e0       	ldi	r22, 0x0A	; 10
 5fa:	70 e0       	ldi	r23, 0x00	; 0
 5fc:	80 e0       	ldi	r24, 0x00	; 0
    TimerOn();
    LCD_init();
 5fe:	90 e0       	ldi	r25, 0x00	; 0
    A2D_init();
 600:	7d de       	rcall	.-774    	; 0x2fc <TimerSet>
 602:	1d de       	rcall	.-966    	; 0x23e <TimerOn>
    initUSART(1);
 604:	88 dd       	rcall	.-1264   	; 0x116 <LCD_init>
 606:	8b de       	rcall	.-746    	; 0x31e <A2D_init>
    ADMUX=0;
 608:	81 e0       	ldi	r24, 0x01	; 1
    unsigned char counter=1;
    LCD_DisplayString(1,"0 0 0 0");
 60a:	b6 dd       	rcall	.-1172   	; 0x178 <initUSART>
 60c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 610:	64 e0       	ldi	r22, 0x04	; 4
    LCD_DisplayString(17,"0 0 0 0");
 612:	71 e0       	ldi	r23, 0x01	; 1
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	97 dd       	rcall	.-1234   	; 0x146 <LCD_DisplayString>
    TimerOn();
    LCD_init();
    A2D_init();
    initUSART(1);
    ADMUX=0;
    unsigned char counter=1;
 618:	64 e0       	ldi	r22, 0x04	; 4
    while(1)
    {
        //LCD_DisplayString(1,"Hello World!");    //LCD SCREEN CHECK
        SM1_Tick();
        SM3_Tick();
        if(counter%30==0){
 61a:	71 e0       	ldi	r23, 0x01	; 1
 61c:	81 e1       	ldi	r24, 0x11	; 17
    LCD_DisplayString(1,"0 0 0 0");
    LCD_DisplayString(17,"0 0 0 0");
    while(1)
    {
        //LCD_DisplayString(1,"Hello World!");    //LCD SCREEN CHECK
        SM1_Tick();
 61e:	93 dd       	rcall	.-1242   	; 0x146 <LCD_DisplayString>
 620:	c1 e0       	ldi	r28, 0x01	; 1
        SM3_Tick();
 622:	19 e8       	ldi	r17, 0x89	; 137
 624:	de e1       	ldi	r29, 0x1E	; 30
        if(counter%30==0){
 626:	81 de       	rcall	.-766    	; 0x32a <SM1_Tick>
 628:	30 df       	rcall	.-416    	; 0x48a <SM3_Tick>
 62a:	c1 9f       	mul	r28, r17
 62c:	81 2d       	mov	r24, r1
 62e:	11 24       	eor	r1, r1
 630:	82 95       	swap	r24
 632:	8f 70       	andi	r24, 0x0F	; 15
 634:	9c 2f       	mov	r25, r28
 636:	8d 9f       	mul	r24, r29
            SM2_Tick();
 638:	90 19       	sub	r25, r0
 63a:	11 24       	eor	r1, r1
            SM4_Tick();
 63c:	91 11       	cpse	r25, r1
 63e:	04 c0       	rjmp	.+8      	; 0x648 <main+0x6a>
            counter=1;
 640:	db de       	rcall	.-586    	; 0x3f8 <SM2_Tick>
 642:	a3 df       	rcall	.-186    	; 0x58a <SM4_Tick>
        }
        else{
            counter++;
 644:	c1 e0       	ldi	r28, 0x01	; 1
        }
        while(!TimerFlag);
 646:	01 c0       	rjmp	.+2      	; 0x64a <main+0x6c>
 648:	cf 5f       	subi	r28, 0xFF	; 255
 64a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <TimerFlag>
        TimerFlag = 0;
 64e:	88 23       	and	r24, r24
 650:	e1 f3       	breq	.-8      	; 0x64a <main+0x6c>
    }
 652:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <TimerFlag>
 656:	e7 cf       	rjmp	.-50     	; 0x626 <main+0x48>

00000658 <_exit>:
 658:	f8 94       	cli

0000065a <__stop_program>:
 65a:	ff cf       	rjmp	.-2      	; 0x65a <__stop_program>
